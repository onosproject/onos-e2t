// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/e2ap/v1beta1/e2ap_pdu_contents.proto

package e2appducontents

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on RicsubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionRequestMultiError, or nil if none found.
func (m *RicsubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionRequestValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionRequestValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicsubscriptionRequestMultiError(errors)
	}
	return nil
}

// RicsubscriptionRequestMultiError is an error wrapping multiple validation
// errors returned by RicsubscriptionRequest.ValidateAll() if the designated
// constraints aren't met.
type RicsubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionRequestMultiError) AllErrors() []error { return m }

// RicsubscriptionRequestValidationError is the validation error returned by
// RicsubscriptionRequest.Validate if the designated constraints aren't met.
type RicsubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionRequestValidationError) ErrorName() string {
	return "RicsubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionRequestValidationError{}

// Validate checks the field values on RicsubscriptionRequestIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionRequestIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubscriptionRequestIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionRequestIesMultiError, or nil if none found.
func (m *RicsubscriptionRequestIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionRequestIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes29()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionRequestIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionRequestIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes29()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIesValidationError{
				field:  "E2ApProtocolIes29",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionRequestIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionRequestIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIesValidationError{
				field:  "E2ApProtocolIes5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes30()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionRequestIesValidationError{
					field:  "E2ApProtocolIes30",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionRequestIesValidationError{
					field:  "E2ApProtocolIes30",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes30()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIesValidationError{
				field:  "E2ApProtocolIes30",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicsubscriptionRequestIesMultiError(errors)
	}
	return nil
}

// RicsubscriptionRequestIesMultiError is an error wrapping multiple validation
// errors returned by RicsubscriptionRequestIes.ValidateAll() if the
// designated constraints aren't met.
type RicsubscriptionRequestIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionRequestIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionRequestIesMultiError) AllErrors() []error { return m }

// RicsubscriptionRequestIesValidationError is the validation error returned by
// RicsubscriptionRequestIes.Validate if the designated constraints aren't met.
type RicsubscriptionRequestIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionRequestIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionRequestIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionRequestIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionRequestIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionRequestIesValidationError) ErrorName() string {
	return "RicsubscriptionRequestIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionRequestIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionRequestIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionRequestIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionRequestIesValidationError{}

// Validate checks the field values on RicsubscriptionDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubscriptionDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionDetailsMultiError, or nil if none found.
func (m *RicsubscriptionDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicEventTriggerDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDetailsValidationError{
					field:  "RicEventTriggerDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDetailsValidationError{
					field:  "RicEventTriggerDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDetailsValidationError{
				field:  "RicEventTriggerDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicActionToBeSetupList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDetailsValidationError{
					field:  "RicActionToBeSetupList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDetailsValidationError{
					field:  "RicActionToBeSetupList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicActionToBeSetupList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDetailsValidationError{
				field:  "RicActionToBeSetupList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicsubscriptionDetailsMultiError(errors)
	}
	return nil
}

// RicsubscriptionDetailsMultiError is an error wrapping multiple validation
// errors returned by RicsubscriptionDetails.ValidateAll() if the designated
// constraints aren't met.
type RicsubscriptionDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDetailsMultiError) AllErrors() []error { return m }

// RicsubscriptionDetailsValidationError is the validation error returned by
// RicsubscriptionDetails.Validate if the designated constraints aren't met.
type RicsubscriptionDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDetailsValidationError) ErrorName() string {
	return "RicsubscriptionDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDetailsValidationError{}

// Validate checks the field values on RicactionsToBeSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicactionsToBeSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicactionsToBeSetupList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicactionsToBeSetupListMultiError, or nil if none found.
func (m *RicactionsToBeSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *RicactionsToBeSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) > 16 {
		err := RicactionsToBeSetupListValidationError{
			field:  "Value",
			reason: "value must contain no more than 16 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicactionsToBeSetupListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicactionsToBeSetupListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicactionsToBeSetupListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RicactionsToBeSetupListMultiError(errors)
	}
	return nil
}

// RicactionsToBeSetupListMultiError is an error wrapping multiple validation
// errors returned by RicactionsToBeSetupList.ValidateAll() if the designated
// constraints aren't met.
type RicactionsToBeSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicactionsToBeSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicactionsToBeSetupListMultiError) AllErrors() []error { return m }

// RicactionsToBeSetupListValidationError is the validation error returned by
// RicactionsToBeSetupList.Validate if the designated constraints aren't met.
type RicactionsToBeSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionsToBeSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionsToBeSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionsToBeSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionsToBeSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionsToBeSetupListValidationError) ErrorName() string {
	return "RicactionsToBeSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionsToBeSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionsToBeSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionsToBeSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionsToBeSetupListValidationError{}

// Validate checks the field values on RicactionToBeSetupItemIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicactionToBeSetupItemIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicactionToBeSetupItemIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicactionToBeSetupItemIesMultiError, or nil if none found.
func (m *RicactionToBeSetupItemIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicactionToBeSetupItemIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 19 {
		err := RicactionToBeSetupItemIesValidationError{
			field:  "Id",
			reason: "value must equal 19",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := RicactionToBeSetupItemIesValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicactionToBeSetupItemIesValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicactionToBeSetupItemIesValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionToBeSetupItemIesValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicactionToBeSetupItemIesValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicactionToBeSetupItemIesMultiError(errors)
	}
	return nil
}

// RicactionToBeSetupItemIesMultiError is an error wrapping multiple validation
// errors returned by RicactionToBeSetupItemIes.ValidateAll() if the
// designated constraints aren't met.
type RicactionToBeSetupItemIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicactionToBeSetupItemIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicactionToBeSetupItemIesMultiError) AllErrors() []error { return m }

// RicactionToBeSetupItemIesValidationError is the validation error returned by
// RicactionToBeSetupItemIes.Validate if the designated constraints aren't met.
type RicactionToBeSetupItemIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionToBeSetupItemIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionToBeSetupItemIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionToBeSetupItemIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionToBeSetupItemIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionToBeSetupItemIesValidationError) ErrorName() string {
	return "RicactionToBeSetupItemIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionToBeSetupItemIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionToBeSetupItemIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionToBeSetupItemIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionToBeSetupItemIesValidationError{}

// Validate checks the field values on RicactionToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicactionToBeSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicactionToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicactionToBeSetupItemMultiError, or nil if none found.
func (m *RicactionToBeSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RicactionToBeSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicactionToBeSetupItemValidationError{
					field:  "RicActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicactionToBeSetupItemValidationError{
					field:  "RicActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionToBeSetupItemValidationError{
				field:  "RicActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RicActionType

	if all {
		switch v := interface{}(m.GetRicActionDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicactionToBeSetupItemValidationError{
					field:  "RicActionDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicactionToBeSetupItemValidationError{
					field:  "RicActionDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicActionDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionToBeSetupItemValidationError{
				field:  "RicActionDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicSubsequentAction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicactionToBeSetupItemValidationError{
					field:  "RicSubsequentAction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicactionToBeSetupItemValidationError{
					field:  "RicSubsequentAction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicSubsequentAction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionToBeSetupItemValidationError{
				field:  "RicSubsequentAction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicactionToBeSetupItemMultiError(errors)
	}
	return nil
}

// RicactionToBeSetupItemMultiError is an error wrapping multiple validation
// errors returned by RicactionToBeSetupItem.ValidateAll() if the designated
// constraints aren't met.
type RicactionToBeSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicactionToBeSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicactionToBeSetupItemMultiError) AllErrors() []error { return m }

// RicactionToBeSetupItemValidationError is the validation error returned by
// RicactionToBeSetupItem.Validate if the designated constraints aren't met.
type RicactionToBeSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionToBeSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionToBeSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionToBeSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionToBeSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionToBeSetupItemValidationError) ErrorName() string {
	return "RicactionToBeSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionToBeSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionToBeSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionToBeSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionToBeSetupItemValidationError{}

// Validate checks the field values on RicsubscriptionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionResponseMultiError, or nil if none found.
func (m *RicsubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionResponseValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionResponseValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicsubscriptionResponseMultiError(errors)
	}
	return nil
}

// RicsubscriptionResponseMultiError is an error wrapping multiple validation
// errors returned by RicsubscriptionResponse.ValidateAll() if the designated
// constraints aren't met.
type RicsubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionResponseMultiError) AllErrors() []error { return m }

// RicsubscriptionResponseValidationError is the validation error returned by
// RicsubscriptionResponse.Validate if the designated constraints aren't met.
type RicsubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionResponseValidationError) ErrorName() string {
	return "RicsubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionResponseValidationError{}

// Validate checks the field values on RicsubscriptionResponseIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionResponseIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubscriptionResponseIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionResponseIesMultiError, or nil if none found.
func (m *RicsubscriptionResponseIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionResponseIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes29()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionResponseIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionResponseIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes29()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIesValidationError{
				field:  "E2ApProtocolIes29",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionResponseIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionResponseIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIesValidationError{
				field:  "E2ApProtocolIes5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes17()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionResponseIesValidationError{
					field:  "E2ApProtocolIes17",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionResponseIesValidationError{
					field:  "E2ApProtocolIes17",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes17()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIesValidationError{
				field:  "E2ApProtocolIes17",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes18()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionResponseIesValidationError{
					field:  "E2ApProtocolIes18",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionResponseIesValidationError{
					field:  "E2ApProtocolIes18",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes18()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIesValidationError{
				field:  "E2ApProtocolIes18",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicsubscriptionResponseIesMultiError(errors)
	}
	return nil
}

// RicsubscriptionResponseIesMultiError is an error wrapping multiple
// validation errors returned by RicsubscriptionResponseIes.ValidateAll() if
// the designated constraints aren't met.
type RicsubscriptionResponseIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionResponseIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionResponseIesMultiError) AllErrors() []error { return m }

// RicsubscriptionResponseIesValidationError is the validation error returned
// by RicsubscriptionResponseIes.Validate if the designated constraints aren't met.
type RicsubscriptionResponseIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionResponseIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionResponseIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionResponseIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionResponseIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionResponseIesValidationError) ErrorName() string {
	return "RicsubscriptionResponseIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionResponseIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionResponseIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionResponseIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionResponseIesValidationError{}

// Validate checks the field values on RicactionAdmittedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicactionAdmittedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicactionAdmittedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicactionAdmittedListMultiError, or nil if none found.
func (m *RicactionAdmittedList) ValidateAll() error {
	return m.validate(true)
}

func (m *RicactionAdmittedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) > 16 {
		err := RicactionAdmittedListValidationError{
			field:  "Value",
			reason: "value must contain no more than 16 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicactionAdmittedListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicactionAdmittedListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicactionAdmittedListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RicactionAdmittedListMultiError(errors)
	}
	return nil
}

// RicactionAdmittedListMultiError is an error wrapping multiple validation
// errors returned by RicactionAdmittedList.ValidateAll() if the designated
// constraints aren't met.
type RicactionAdmittedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicactionAdmittedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicactionAdmittedListMultiError) AllErrors() []error { return m }

// RicactionAdmittedListValidationError is the validation error returned by
// RicactionAdmittedList.Validate if the designated constraints aren't met.
type RicactionAdmittedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionAdmittedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionAdmittedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionAdmittedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionAdmittedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionAdmittedListValidationError) ErrorName() string {
	return "RicactionAdmittedListValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionAdmittedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionAdmittedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionAdmittedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionAdmittedListValidationError{}

// Validate checks the field values on RicactionAdmittedItemIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicactionAdmittedItemIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicactionAdmittedItemIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicactionAdmittedItemIesMultiError, or nil if none found.
func (m *RicactionAdmittedItemIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicactionAdmittedItemIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 14 {
		err := RicactionAdmittedItemIesValidationError{
			field:  "Id",
			reason: "value must equal 14",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := RicactionAdmittedItemIesValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicactionAdmittedItemIesValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicactionAdmittedItemIesValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionAdmittedItemIesValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicactionAdmittedItemIesValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicactionAdmittedItemIesMultiError(errors)
	}
	return nil
}

// RicactionAdmittedItemIesMultiError is an error wrapping multiple validation
// errors returned by RicactionAdmittedItemIes.ValidateAll() if the designated
// constraints aren't met.
type RicactionAdmittedItemIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicactionAdmittedItemIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicactionAdmittedItemIesMultiError) AllErrors() []error { return m }

// RicactionAdmittedItemIesValidationError is the validation error returned by
// RicactionAdmittedItemIes.Validate if the designated constraints aren't met.
type RicactionAdmittedItemIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionAdmittedItemIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionAdmittedItemIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionAdmittedItemIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionAdmittedItemIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionAdmittedItemIesValidationError) ErrorName() string {
	return "RicactionAdmittedItemIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionAdmittedItemIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionAdmittedItemIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionAdmittedItemIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionAdmittedItemIesValidationError{}

// Validate checks the field values on RicactionAdmittedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicactionAdmittedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicactionAdmittedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicactionAdmittedItemMultiError, or nil if none found.
func (m *RicactionAdmittedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RicactionAdmittedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicactionAdmittedItemValidationError{
					field:  "RicActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicactionAdmittedItemValidationError{
					field:  "RicActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionAdmittedItemValidationError{
				field:  "RicActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicactionAdmittedItemMultiError(errors)
	}
	return nil
}

// RicactionAdmittedItemMultiError is an error wrapping multiple validation
// errors returned by RicactionAdmittedItem.ValidateAll() if the designated
// constraints aren't met.
type RicactionAdmittedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicactionAdmittedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicactionAdmittedItemMultiError) AllErrors() []error { return m }

// RicactionAdmittedItemValidationError is the validation error returned by
// RicactionAdmittedItem.Validate if the designated constraints aren't met.
type RicactionAdmittedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionAdmittedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionAdmittedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionAdmittedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionAdmittedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionAdmittedItemValidationError) ErrorName() string {
	return "RicactionAdmittedItemValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionAdmittedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionAdmittedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionAdmittedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionAdmittedItemValidationError{}

// Validate checks the field values on RicactionNotAdmittedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicactionNotAdmittedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicactionNotAdmittedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicactionNotAdmittedListMultiError, or nil if none found.
func (m *RicactionNotAdmittedList) ValidateAll() error {
	return m.validate(true)
}

func (m *RicactionNotAdmittedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) > 16 {
		err := RicactionNotAdmittedListValidationError{
			field:  "Value",
			reason: "value must contain no more than 16 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicactionNotAdmittedListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicactionNotAdmittedListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicactionNotAdmittedListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RicactionNotAdmittedListMultiError(errors)
	}
	return nil
}

// RicactionNotAdmittedListMultiError is an error wrapping multiple validation
// errors returned by RicactionNotAdmittedList.ValidateAll() if the designated
// constraints aren't met.
type RicactionNotAdmittedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicactionNotAdmittedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicactionNotAdmittedListMultiError) AllErrors() []error { return m }

// RicactionNotAdmittedListValidationError is the validation error returned by
// RicactionNotAdmittedList.Validate if the designated constraints aren't met.
type RicactionNotAdmittedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionNotAdmittedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionNotAdmittedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionNotAdmittedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionNotAdmittedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionNotAdmittedListValidationError) ErrorName() string {
	return "RicactionNotAdmittedListValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionNotAdmittedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionNotAdmittedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionNotAdmittedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionNotAdmittedListValidationError{}

// Validate checks the field values on RicactionNotAdmittedItemIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicactionNotAdmittedItemIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicactionNotAdmittedItemIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicactionNotAdmittedItemIesMultiError, or nil if none found.
func (m *RicactionNotAdmittedItemIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicactionNotAdmittedItemIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 16 {
		err := RicactionNotAdmittedItemIesValidationError{
			field:  "Id",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := RicactionNotAdmittedItemIesValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicactionNotAdmittedItemIesValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicactionNotAdmittedItemIesValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionNotAdmittedItemIesValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicactionNotAdmittedItemIesValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicactionNotAdmittedItemIesMultiError(errors)
	}
	return nil
}

// RicactionNotAdmittedItemIesMultiError is an error wrapping multiple
// validation errors returned by RicactionNotAdmittedItemIes.ValidateAll() if
// the designated constraints aren't met.
type RicactionNotAdmittedItemIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicactionNotAdmittedItemIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicactionNotAdmittedItemIesMultiError) AllErrors() []error { return m }

// RicactionNotAdmittedItemIesValidationError is the validation error returned
// by RicactionNotAdmittedItemIes.Validate if the designated constraints
// aren't met.
type RicactionNotAdmittedItemIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionNotAdmittedItemIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionNotAdmittedItemIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionNotAdmittedItemIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionNotAdmittedItemIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionNotAdmittedItemIesValidationError) ErrorName() string {
	return "RicactionNotAdmittedItemIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionNotAdmittedItemIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionNotAdmittedItemIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionNotAdmittedItemIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionNotAdmittedItemIesValidationError{}

// Validate checks the field values on RicactionNotAdmittedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicactionNotAdmittedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicactionNotAdmittedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicactionNotAdmittedItemMultiError, or nil if none found.
func (m *RicactionNotAdmittedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RicactionNotAdmittedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicactionNotAdmittedItemValidationError{
					field:  "RicActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicactionNotAdmittedItemValidationError{
					field:  "RicActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionNotAdmittedItemValidationError{
				field:  "RicActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCause()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicactionNotAdmittedItemValidationError{
					field:  "Cause",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicactionNotAdmittedItemValidationError{
					field:  "Cause",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCause()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionNotAdmittedItemValidationError{
				field:  "Cause",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicactionNotAdmittedItemMultiError(errors)
	}
	return nil
}

// RicactionNotAdmittedItemMultiError is an error wrapping multiple validation
// errors returned by RicactionNotAdmittedItem.ValidateAll() if the designated
// constraints aren't met.
type RicactionNotAdmittedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicactionNotAdmittedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicactionNotAdmittedItemMultiError) AllErrors() []error { return m }

// RicactionNotAdmittedItemValidationError is the validation error returned by
// RicactionNotAdmittedItem.Validate if the designated constraints aren't met.
type RicactionNotAdmittedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionNotAdmittedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionNotAdmittedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionNotAdmittedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionNotAdmittedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionNotAdmittedItemValidationError) ErrorName() string {
	return "RicactionNotAdmittedItemValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionNotAdmittedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionNotAdmittedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionNotAdmittedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionNotAdmittedItemValidationError{}

// Validate checks the field values on RicsubscriptionFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubscriptionFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionFailureMultiError, or nil if none found.
func (m *RicsubscriptionFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionFailureValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionFailureValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicsubscriptionFailureMultiError(errors)
	}
	return nil
}

// RicsubscriptionFailureMultiError is an error wrapping multiple validation
// errors returned by RicsubscriptionFailure.ValidateAll() if the designated
// constraints aren't met.
type RicsubscriptionFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionFailureMultiError) AllErrors() []error { return m }

// RicsubscriptionFailureValidationError is the validation error returned by
// RicsubscriptionFailure.Validate if the designated constraints aren't met.
type RicsubscriptionFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionFailureValidationError) ErrorName() string {
	return "RicsubscriptionFailureValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionFailureValidationError{}

// Validate checks the field values on RicsubscriptionFailureIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionFailureIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubscriptionFailureIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionFailureIesMultiError, or nil if none found.
func (m *RicsubscriptionFailureIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionFailureIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes29()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionFailureIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionFailureIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes29()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIesValidationError{
				field:  "E2ApProtocolIes29",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionFailureIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionFailureIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIesValidationError{
				field:  "E2ApProtocolIes5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes18()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionFailureIesValidationError{
					field:  "E2ApProtocolIes18",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionFailureIesValidationError{
					field:  "E2ApProtocolIes18",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes18()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIesValidationError{
				field:  "E2ApProtocolIes18",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionFailureIesValidationError{
					field:  "E2ApProtocolIes2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionFailureIesValidationError{
					field:  "E2ApProtocolIes2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIesValidationError{
				field:  "E2ApProtocolIes2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicsubscriptionFailureIesMultiError(errors)
	}
	return nil
}

// RicsubscriptionFailureIesMultiError is an error wrapping multiple validation
// errors returned by RicsubscriptionFailureIes.ValidateAll() if the
// designated constraints aren't met.
type RicsubscriptionFailureIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionFailureIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionFailureIesMultiError) AllErrors() []error { return m }

// RicsubscriptionFailureIesValidationError is the validation error returned by
// RicsubscriptionFailureIes.Validate if the designated constraints aren't met.
type RicsubscriptionFailureIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionFailureIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionFailureIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionFailureIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionFailureIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionFailureIesValidationError) ErrorName() string {
	return "RicsubscriptionFailureIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionFailureIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionFailureIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionFailureIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionFailureIesValidationError{}

// Validate checks the field values on RicsubscriptionDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubscriptionDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteRequestMultiError, or nil if none found.
func (m *RicsubscriptionDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteRequestValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteRequestValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteRequestMultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by RicsubscriptionDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type RicsubscriptionDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteRequestMultiError) AllErrors() []error { return m }

// RicsubscriptionDeleteRequestValidationError is the validation error returned
// by RicsubscriptionDeleteRequest.Validate if the designated constraints
// aren't met.
type RicsubscriptionDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDeleteRequestValidationError) ErrorName() string {
	return "RicsubscriptionDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteRequestValidationError{}

// Validate checks the field values on RicsubscriptionDeleteRequestIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionDeleteRequestIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubscriptionDeleteRequestIes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteRequestIesMultiError, or nil if none found.
func (m *RicsubscriptionDeleteRequestIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteRequestIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes29()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteRequestIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteRequestIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes29()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestIesValidationError{
				field:  "E2ApProtocolIes29",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteRequestIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteRequestIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestIesValidationError{
				field:  "E2ApProtocolIes5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteRequestIesMultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteRequestIesMultiError is an error wrapping multiple
// validation errors returned by RicsubscriptionDeleteRequestIes.ValidateAll()
// if the designated constraints aren't met.
type RicsubscriptionDeleteRequestIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteRequestIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteRequestIesMultiError) AllErrors() []error { return m }

// RicsubscriptionDeleteRequestIesValidationError is the validation error
// returned by RicsubscriptionDeleteRequestIes.Validate if the designated
// constraints aren't met.
type RicsubscriptionDeleteRequestIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteRequestIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDeleteRequestIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDeleteRequestIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDeleteRequestIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDeleteRequestIesValidationError) ErrorName() string {
	return "RicsubscriptionDeleteRequestIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteRequestIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteRequestIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteRequestIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteRequestIesValidationError{}

// Validate checks the field values on RicsubscriptionDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubscriptionDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteResponseMultiError, or nil if none found.
func (m *RicsubscriptionDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteResponseValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteResponseValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteResponseMultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by RicsubscriptionDeleteResponse.ValidateAll()
// if the designated constraints aren't met.
type RicsubscriptionDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteResponseMultiError) AllErrors() []error { return m }

// RicsubscriptionDeleteResponseValidationError is the validation error
// returned by RicsubscriptionDeleteResponse.Validate if the designated
// constraints aren't met.
type RicsubscriptionDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDeleteResponseValidationError) ErrorName() string {
	return "RicsubscriptionDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteResponseValidationError{}

// Validate checks the field values on RicsubscriptionDeleteResponseIes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RicsubscriptionDeleteResponseIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubscriptionDeleteResponseIes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteResponseIesMultiError, or nil if none found.
func (m *RicsubscriptionDeleteResponseIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteResponseIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes29()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteResponseIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteResponseIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes29()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseIesValidationError{
				field:  "E2ApProtocolIes29",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteResponseIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteResponseIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseIesValidationError{
				field:  "E2ApProtocolIes5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteResponseIesMultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteResponseIesMultiError is an error wrapping multiple
// validation errors returned by
// RicsubscriptionDeleteResponseIes.ValidateAll() if the designated
// constraints aren't met.
type RicsubscriptionDeleteResponseIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteResponseIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteResponseIesMultiError) AllErrors() []error { return m }

// RicsubscriptionDeleteResponseIesValidationError is the validation error
// returned by RicsubscriptionDeleteResponseIes.Validate if the designated
// constraints aren't met.
type RicsubscriptionDeleteResponseIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteResponseIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDeleteResponseIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDeleteResponseIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDeleteResponseIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDeleteResponseIesValidationError) ErrorName() string {
	return "RicsubscriptionDeleteResponseIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteResponseIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteResponseIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteResponseIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteResponseIesValidationError{}

// Validate checks the field values on RicsubscriptionDeleteFailure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionDeleteFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubscriptionDeleteFailure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteFailureMultiError, or nil if none found.
func (m *RicsubscriptionDeleteFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteFailureMultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteFailureMultiError is an error wrapping multiple
// validation errors returned by RicsubscriptionDeleteFailure.ValidateAll() if
// the designated constraints aren't met.
type RicsubscriptionDeleteFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteFailureMultiError) AllErrors() []error { return m }

// RicsubscriptionDeleteFailureValidationError is the validation error returned
// by RicsubscriptionDeleteFailure.Validate if the designated constraints
// aren't met.
type RicsubscriptionDeleteFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDeleteFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDeleteFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDeleteFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDeleteFailureValidationError) ErrorName() string {
	return "RicsubscriptionDeleteFailureValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteFailureValidationError{}

// Validate checks the field values on RicsubscriptionDeleteFailureIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionDeleteFailureIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubscriptionDeleteFailureIes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteFailureIesMultiError, or nil if none found.
func (m *RicsubscriptionDeleteFailureIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteFailureIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes29()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes29()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIesValidationError{
				field:  "E2ApProtocolIes29",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIesValidationError{
				field:  "E2ApProtocolIes5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIesValidationError{
					field:  "E2ApProtocolIes1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIesValidationError{
					field:  "E2ApProtocolIes1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIesValidationError{
				field:  "E2ApProtocolIes1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIesValidationError{
					field:  "E2ApProtocolIes2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIesValidationError{
					field:  "E2ApProtocolIes2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIesValidationError{
				field:  "E2ApProtocolIes2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteFailureIesMultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteFailureIesMultiError is an error wrapping multiple
// validation errors returned by RicsubscriptionDeleteFailureIes.ValidateAll()
// if the designated constraints aren't met.
type RicsubscriptionDeleteFailureIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteFailureIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteFailureIesMultiError) AllErrors() []error { return m }

// RicsubscriptionDeleteFailureIesValidationError is the validation error
// returned by RicsubscriptionDeleteFailureIes.Validate if the designated
// constraints aren't met.
type RicsubscriptionDeleteFailureIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteFailureIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDeleteFailureIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDeleteFailureIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDeleteFailureIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDeleteFailureIesValidationError) ErrorName() string {
	return "RicsubscriptionDeleteFailureIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteFailureIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteFailureIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteFailureIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteFailureIesValidationError{}

// Validate checks the field values on Ricindication with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ricindication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ricindication with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicindicationMultiError, or
// nil if none found.
func (m *Ricindication) ValidateAll() error {
	return m.validate(true)
}

func (m *Ricindication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicindicationMultiError(errors)
	}
	return nil
}

// RicindicationMultiError is an error wrapping multiple validation errors
// returned by Ricindication.ValidateAll() if the designated constraints
// aren't met.
type RicindicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicindicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicindicationMultiError) AllErrors() []error { return m }

// RicindicationValidationError is the validation error returned by
// Ricindication.Validate if the designated constraints aren't met.
type RicindicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationValidationError) ErrorName() string { return "RicindicationValidationError" }

// Error satisfies the builtin error interface
func (e RicindicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationValidationError{}

// Validate checks the field values on RicindicationIes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RicindicationIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicindicationIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicindicationIesMultiError, or nil if none found.
func (m *RicindicationIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicindicationIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes29()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes29()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIesValidationError{
				field:  "E2ApProtocolIes29",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIesValidationError{
				field:  "E2ApProtocolIes5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes15()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes15",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes15",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes15()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIesValidationError{
				field:  "E2ApProtocolIes15",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes27()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes27",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes27",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes27()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIesValidationError{
				field:  "E2ApProtocolIes27",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes28()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes28",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes28",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes28()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIesValidationError{
				field:  "E2ApProtocolIes28",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes25()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes25",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes25",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes25()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIesValidationError{
				field:  "E2ApProtocolIes25",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes26()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes26",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes26",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes26()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIesValidationError{
				field:  "E2ApProtocolIes26",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes20()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes20",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIesValidationError{
					field:  "E2ApProtocolIes20",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes20()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIesValidationError{
				field:  "E2ApProtocolIes20",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicindicationIesMultiError(errors)
	}
	return nil
}

// RicindicationIesMultiError is an error wrapping multiple validation errors
// returned by RicindicationIes.ValidateAll() if the designated constraints
// aren't met.
type RicindicationIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicindicationIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicindicationIesMultiError) AllErrors() []error { return m }

// RicindicationIesValidationError is the validation error returned by
// RicindicationIes.Validate if the designated constraints aren't met.
type RicindicationIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIesValidationError) ErrorName() string { return "RicindicationIesValidationError" }

// Error satisfies the builtin error interface
func (e RicindicationIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIesValidationError{}

// Validate checks the field values on RiccontrolRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RiccontrolRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RiccontrolRequestMultiError, or nil if none found.
func (m *RiccontrolRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolRequestValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolRequestValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RiccontrolRequestMultiError(errors)
	}
	return nil
}

// RiccontrolRequestMultiError is an error wrapping multiple validation errors
// returned by RiccontrolRequest.ValidateAll() if the designated constraints
// aren't met.
type RiccontrolRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolRequestMultiError) AllErrors() []error { return m }

// RiccontrolRequestValidationError is the validation error returned by
// RiccontrolRequest.Validate if the designated constraints aren't met.
type RiccontrolRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestValidationError) ErrorName() string {
	return "RiccontrolRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestValidationError{}

// Validate checks the field values on RiccontrolRequestIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolRequestIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RiccontrolRequestIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RiccontrolRequestIesMultiError, or nil if none found.
func (m *RiccontrolRequestIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolRequestIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes29()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolRequestIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolRequestIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes29()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIesValidationError{
				field:  "E2ApProtocolIes29",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolRequestIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolRequestIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIesValidationError{
				field:  "E2ApProtocolIes5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes20()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolRequestIesValidationError{
					field:  "E2ApProtocolIes20",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolRequestIesValidationError{
					field:  "E2ApProtocolIes20",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes20()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIesValidationError{
				field:  "E2ApProtocolIes20",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes22()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolRequestIesValidationError{
					field:  "E2ApProtocolIes22",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolRequestIesValidationError{
					field:  "E2ApProtocolIes22",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes22()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIesValidationError{
				field:  "E2ApProtocolIes22",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes23()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolRequestIesValidationError{
					field:  "E2ApProtocolIes23",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolRequestIesValidationError{
					field:  "E2ApProtocolIes23",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes23()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIesValidationError{
				field:  "E2ApProtocolIes23",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes21()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolRequestIesValidationError{
					field:  "E2ApProtocolIes21",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolRequestIesValidationError{
					field:  "E2ApProtocolIes21",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes21()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIesValidationError{
				field:  "E2ApProtocolIes21",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RiccontrolRequestIesMultiError(errors)
	}
	return nil
}

// RiccontrolRequestIesMultiError is an error wrapping multiple validation
// errors returned by RiccontrolRequestIes.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolRequestIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolRequestIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolRequestIesMultiError) AllErrors() []error { return m }

// RiccontrolRequestIesValidationError is the validation error returned by
// RiccontrolRequestIes.Validate if the designated constraints aren't met.
type RiccontrolRequestIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIesValidationError) ErrorName() string {
	return "RiccontrolRequestIesValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIesValidationError{}

// Validate checks the field values on RiccontrolAcknowledge with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolAcknowledge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RiccontrolAcknowledge with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RiccontrolAcknowledgeMultiError, or nil if none found.
func (m *RiccontrolAcknowledge) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolAcknowledge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RiccontrolAcknowledgeMultiError(errors)
	}
	return nil
}

// RiccontrolAcknowledgeMultiError is an error wrapping multiple validation
// errors returned by RiccontrolAcknowledge.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolAcknowledgeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolAcknowledgeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolAcknowledgeMultiError) AllErrors() []error { return m }

// RiccontrolAcknowledgeValidationError is the validation error returned by
// RiccontrolAcknowledge.Validate if the designated constraints aren't met.
type RiccontrolAcknowledgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolAcknowledgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolAcknowledgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolAcknowledgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeValidationError{}

// Validate checks the field values on RiccontrolAcknowledgeIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolAcknowledgeIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RiccontrolAcknowledgeIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RiccontrolAcknowledgeIesMultiError, or nil if none found.
func (m *RiccontrolAcknowledgeIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolAcknowledgeIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes29()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes29()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIesValidationError{
				field:  "E2ApProtocolIes29",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIesValidationError{
				field:  "E2ApProtocolIes5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes20()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes20",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes20",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes20()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIesValidationError{
				field:  "E2ApProtocolIes20",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes24()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes24",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes24",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes24()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIesValidationError{
				field:  "E2ApProtocolIes24",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes32()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes32",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes32",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes32()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIesValidationError{
				field:  "E2ApProtocolIes32",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RiccontrolAcknowledgeIesMultiError(errors)
	}
	return nil
}

// RiccontrolAcknowledgeIesMultiError is an error wrapping multiple validation
// errors returned by RiccontrolAcknowledgeIes.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolAcknowledgeIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolAcknowledgeIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolAcknowledgeIesMultiError) AllErrors() []error { return m }

// RiccontrolAcknowledgeIesValidationError is the validation error returned by
// RiccontrolAcknowledgeIes.Validate if the designated constraints aren't met.
type RiccontrolAcknowledgeIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolAcknowledgeIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolAcknowledgeIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolAcknowledgeIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeIesValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeIesValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledgeIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeIesValidationError{}

// Validate checks the field values on RiccontrolFailure with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RiccontrolFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RiccontrolFailureMultiError, or nil if none found.
func (m *RiccontrolFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolFailureValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolFailureValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RiccontrolFailureMultiError(errors)
	}
	return nil
}

// RiccontrolFailureMultiError is an error wrapping multiple validation errors
// returned by RiccontrolFailure.ValidateAll() if the designated constraints
// aren't met.
type RiccontrolFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolFailureMultiError) AllErrors() []error { return m }

// RiccontrolFailureValidationError is the validation error returned by
// RiccontrolFailure.Validate if the designated constraints aren't met.
type RiccontrolFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureValidationError) ErrorName() string {
	return "RiccontrolFailureValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureValidationError{}

// Validate checks the field values on RiccontrolFailureIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolFailureIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RiccontrolFailureIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RiccontrolFailureIesMultiError, or nil if none found.
func (m *RiccontrolFailureIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolFailureIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes29()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolFailureIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolFailureIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes29()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIesValidationError{
				field:  "E2ApProtocolIes29",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolFailureIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolFailureIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIesValidationError{
				field:  "E2ApProtocolIes5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes20()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolFailureIesValidationError{
					field:  "E2ApProtocolIes20",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolFailureIesValidationError{
					field:  "E2ApProtocolIes20",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes20()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIesValidationError{
				field:  "E2ApProtocolIes20",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolFailureIesValidationError{
					field:  "E2ApProtocolIes1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolFailureIesValidationError{
					field:  "E2ApProtocolIes1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIesValidationError{
				field:  "E2ApProtocolIes1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes32()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolFailureIesValidationError{
					field:  "E2ApProtocolIes32",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolFailureIesValidationError{
					field:  "E2ApProtocolIes32",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes32()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIesValidationError{
				field:  "E2ApProtocolIes32",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RiccontrolFailureIesMultiError(errors)
	}
	return nil
}

// RiccontrolFailureIesMultiError is an error wrapping multiple validation
// errors returned by RiccontrolFailureIes.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolFailureIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolFailureIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolFailureIesMultiError) AllErrors() []error { return m }

// RiccontrolFailureIesValidationError is the validation error returned by
// RiccontrolFailureIes.Validate if the designated constraints aren't met.
type RiccontrolFailureIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureIesValidationError) ErrorName() string {
	return "RiccontrolFailureIesValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailureIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureIesValidationError{}

// Validate checks the field values on ErrorIndication with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ErrorIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ErrorIndicationMultiError, or nil if none found.
func (m *ErrorIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorIndicationValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorIndicationValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ErrorIndicationMultiError(errors)
	}
	return nil
}

// ErrorIndicationMultiError is an error wrapping multiple validation errors
// returned by ErrorIndication.ValidateAll() if the designated constraints
// aren't met.
type ErrorIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorIndicationMultiError) AllErrors() []error { return m }

// ErrorIndicationValidationError is the validation error returned by
// ErrorIndication.Validate if the designated constraints aren't met.
type ErrorIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorIndicationValidationError) ErrorName() string { return "ErrorIndicationValidationError" }

// Error satisfies the builtin error interface
func (e ErrorIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorIndicationValidationError{}

// Validate checks the field values on ErrorIndicationIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ErrorIndicationIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorIndicationIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ErrorIndicationIesMultiError, or nil if none found.
func (m *ErrorIndicationIes) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorIndicationIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes29()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorIndicationIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorIndicationIesValidationError{
					field:  "E2ApProtocolIes29",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes29()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIesValidationError{
				field:  "E2ApProtocolIes29",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorIndicationIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorIndicationIesValidationError{
					field:  "E2ApProtocolIes5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIesValidationError{
				field:  "E2ApProtocolIes5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorIndicationIesValidationError{
					field:  "E2ApProtocolIes1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorIndicationIesValidationError{
					field:  "E2ApProtocolIes1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIesValidationError{
				field:  "E2ApProtocolIes1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorIndicationIesValidationError{
					field:  "E2ApProtocolIes2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorIndicationIesValidationError{
					field:  "E2ApProtocolIes2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIesValidationError{
				field:  "E2ApProtocolIes2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ErrorIndicationIesMultiError(errors)
	}
	return nil
}

// ErrorIndicationIesMultiError is an error wrapping multiple validation errors
// returned by ErrorIndicationIes.ValidateAll() if the designated constraints
// aren't met.
type ErrorIndicationIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorIndicationIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorIndicationIesMultiError) AllErrors() []error { return m }

// ErrorIndicationIesValidationError is the validation error returned by
// ErrorIndicationIes.Validate if the designated constraints aren't met.
type ErrorIndicationIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorIndicationIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorIndicationIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorIndicationIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorIndicationIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorIndicationIesValidationError) ErrorName() string {
	return "ErrorIndicationIesValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorIndicationIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorIndicationIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorIndicationIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorIndicationIesValidationError{}

// Validate checks the field values on E2SetupRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *E2SetupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SetupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in E2SetupRequestMultiError,
// or nil if none found.
func (m *E2SetupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupRequestValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupRequestValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SetupRequestMultiError(errors)
	}
	return nil
}

// E2SetupRequestMultiError is an error wrapping multiple validation errors
// returned by E2SetupRequest.ValidateAll() if the designated constraints
// aren't met.
type E2SetupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupRequestMultiError) AllErrors() []error { return m }

// E2SetupRequestValidationError is the validation error returned by
// E2SetupRequest.Validate if the designated constraints aren't met.
type E2SetupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupRequestValidationError) ErrorName() string { return "E2SetupRequestValidationError" }

// Error satisfies the builtin error interface
func (e E2SetupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupRequestValidationError{}

// Validate checks the field values on E2SetupRequestIes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *E2SetupRequestIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SetupRequestIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SetupRequestIesMultiError, or nil if none found.
func (m *E2SetupRequestIes) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupRequestIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes3()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupRequestIesValidationError{
					field:  "E2ApProtocolIes3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupRequestIesValidationError{
					field:  "E2ApProtocolIes3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestIesValidationError{
				field:  "E2ApProtocolIes3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes10()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupRequestIesValidationError{
					field:  "E2ApProtocolIes10",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupRequestIesValidationError{
					field:  "E2ApProtocolIes10",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes10()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestIesValidationError{
				field:  "E2ApProtocolIes10",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SetupRequestIesMultiError(errors)
	}
	return nil
}

// E2SetupRequestIesMultiError is an error wrapping multiple validation errors
// returned by E2SetupRequestIes.ValidateAll() if the designated constraints
// aren't met.
type E2SetupRequestIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupRequestIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupRequestIesMultiError) AllErrors() []error { return m }

// E2SetupRequestIesValidationError is the validation error returned by
// E2SetupRequestIes.Validate if the designated constraints aren't met.
type E2SetupRequestIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupRequestIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupRequestIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupRequestIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupRequestIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupRequestIesValidationError) ErrorName() string {
	return "E2SetupRequestIesValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupRequestIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupRequestIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupRequestIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupRequestIesValidationError{}

// Validate checks the field values on E2SetupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *E2SetupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SetupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SetupResponseMultiError, or nil if none found.
func (m *E2SetupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupResponseValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupResponseValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SetupResponseMultiError(errors)
	}
	return nil
}

// E2SetupResponseMultiError is an error wrapping multiple validation errors
// returned by E2SetupResponse.ValidateAll() if the designated constraints
// aren't met.
type E2SetupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupResponseMultiError) AllErrors() []error { return m }

// E2SetupResponseValidationError is the validation error returned by
// E2SetupResponse.Validate if the designated constraints aren't met.
type E2SetupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupResponseValidationError) ErrorName() string { return "E2SetupResponseValidationError" }

// Error satisfies the builtin error interface
func (e E2SetupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupResponseValidationError{}

// Validate checks the field values on E2SetupResponseIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SetupResponseIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SetupResponseIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SetupResponseIesMultiError, or nil if none found.
func (m *E2SetupResponseIes) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupResponseIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes4()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupResponseIesValidationError{
					field:  "E2ApProtocolIes4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupResponseIesValidationError{
					field:  "E2ApProtocolIes4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes4()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIesValidationError{
				field:  "E2ApProtocolIes4",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes9()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupResponseIesValidationError{
					field:  "E2ApProtocolIes9",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupResponseIesValidationError{
					field:  "E2ApProtocolIes9",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes9()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIesValidationError{
				field:  "E2ApProtocolIes9",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes13()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupResponseIesValidationError{
					field:  "E2ApProtocolIes13",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupResponseIesValidationError{
					field:  "E2ApProtocolIes13",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes13()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIesValidationError{
				field:  "E2ApProtocolIes13",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SetupResponseIesMultiError(errors)
	}
	return nil
}

// E2SetupResponseIesMultiError is an error wrapping multiple validation errors
// returned by E2SetupResponseIes.ValidateAll() if the designated constraints
// aren't met.
type E2SetupResponseIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupResponseIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupResponseIesMultiError) AllErrors() []error { return m }

// E2SetupResponseIesValidationError is the validation error returned by
// E2SetupResponseIes.Validate if the designated constraints aren't met.
type E2SetupResponseIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupResponseIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupResponseIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupResponseIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupResponseIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupResponseIesValidationError) ErrorName() string {
	return "E2SetupResponseIesValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupResponseIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupResponseIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupResponseIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupResponseIesValidationError{}

// Validate checks the field values on E2SetupFailure with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *E2SetupFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SetupFailure with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in E2SetupFailureMultiError,
// or nil if none found.
func (m *E2SetupFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupFailureValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupFailureValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SetupFailureMultiError(errors)
	}
	return nil
}

// E2SetupFailureMultiError is an error wrapping multiple validation errors
// returned by E2SetupFailure.ValidateAll() if the designated constraints
// aren't met.
type E2SetupFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupFailureMultiError) AllErrors() []error { return m }

// E2SetupFailureValidationError is the validation error returned by
// E2SetupFailure.Validate if the designated constraints aren't met.
type E2SetupFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupFailureValidationError) ErrorName() string { return "E2SetupFailureValidationError" }

// Error satisfies the builtin error interface
func (e E2SetupFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupFailureValidationError{}

// Validate checks the field values on E2SetupFailureIes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *E2SetupFailureIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SetupFailureIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SetupFailureIesMultiError, or nil if none found.
func (m *E2SetupFailureIes) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupFailureIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupFailureIesValidationError{
					field:  "E2ApProtocolIes1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupFailureIesValidationError{
					field:  "E2ApProtocolIes1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIesValidationError{
				field:  "E2ApProtocolIes1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes31()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupFailureIesValidationError{
					field:  "E2ApProtocolIes31",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupFailureIesValidationError{
					field:  "E2ApProtocolIes31",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes31()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIesValidationError{
				field:  "E2ApProtocolIes31",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupFailureIesValidationError{
					field:  "E2ApProtocolIes2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupFailureIesValidationError{
					field:  "E2ApProtocolIes2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIesValidationError{
				field:  "E2ApProtocolIes2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SetupFailureIesMultiError(errors)
	}
	return nil
}

// E2SetupFailureIesMultiError is an error wrapping multiple validation errors
// returned by E2SetupFailureIes.ValidateAll() if the designated constraints
// aren't met.
type E2SetupFailureIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupFailureIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupFailureIesMultiError) AllErrors() []error { return m }

// E2SetupFailureIesValidationError is the validation error returned by
// E2SetupFailureIes.Validate if the designated constraints aren't met.
type E2SetupFailureIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupFailureIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupFailureIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupFailureIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupFailureIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupFailureIesValidationError) ErrorName() string {
	return "E2SetupFailureIesValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupFailureIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupFailureIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupFailureIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupFailureIesValidationError{}

// Validate checks the field values on ResetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetRequestMultiError, or
// nil if none found.
func (m *ResetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetRequestValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetRequestValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetRequestValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResetRequestMultiError(errors)
	}
	return nil
}

// ResetRequestMultiError is an error wrapping multiple validation errors
// returned by ResetRequest.ValidateAll() if the designated constraints aren't met.
type ResetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetRequestMultiError) AllErrors() []error { return m }

// ResetRequestValidationError is the validation error returned by
// ResetRequest.Validate if the designated constraints aren't met.
type ResetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetRequestValidationError) ErrorName() string { return "ResetRequestValidationError" }

// Error satisfies the builtin error interface
func (e ResetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetRequestValidationError{}

// Validate checks the field values on ResetRequestIes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResetRequestIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetRequestIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetRequestIesMultiError, or nil if none found.
func (m *ResetRequestIes) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetRequestIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResetRequestIes1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetRequestIesValidationError{
					field:  "ResetRequestIes1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetRequestIesValidationError{
					field:  "ResetRequestIes1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResetRequestIes1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetRequestIesValidationError{
				field:  "ResetRequestIes1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResetRequestIesMultiError(errors)
	}
	return nil
}

// ResetRequestIesMultiError is an error wrapping multiple validation errors
// returned by ResetRequestIes.ValidateAll() if the designated constraints
// aren't met.
type ResetRequestIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetRequestIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetRequestIesMultiError) AllErrors() []error { return m }

// ResetRequestIesValidationError is the validation error returned by
// ResetRequestIes.Validate if the designated constraints aren't met.
type ResetRequestIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetRequestIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetRequestIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetRequestIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetRequestIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetRequestIesValidationError) ErrorName() string { return "ResetRequestIesValidationError" }

// Error satisfies the builtin error interface
func (e ResetRequestIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetRequestIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetRequestIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetRequestIesValidationError{}

// Validate checks the field values on ResetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetResponseMultiError, or
// nil if none found.
func (m *ResetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetResponseValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetResponseValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetResponseValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResetResponseMultiError(errors)
	}
	return nil
}

// ResetResponseMultiError is an error wrapping multiple validation errors
// returned by ResetResponse.ValidateAll() if the designated constraints
// aren't met.
type ResetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetResponseMultiError) AllErrors() []error { return m }

// ResetResponseValidationError is the validation error returned by
// ResetResponse.Validate if the designated constraints aren't met.
type ResetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetResponseValidationError) ErrorName() string { return "ResetResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetResponseValidationError{}

// Validate checks the field values on ResetResponseIes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResetResponseIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetResponseIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetResponseIesMultiError, or nil if none found.
func (m *ResetResponseIes) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetResponseIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResetResponseIes2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetResponseIesValidationError{
					field:  "ResetResponseIes2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetResponseIesValidationError{
					field:  "ResetResponseIes2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResetResponseIes2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetResponseIesValidationError{
				field:  "ResetResponseIes2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResetResponseIesMultiError(errors)
	}
	return nil
}

// ResetResponseIesMultiError is an error wrapping multiple validation errors
// returned by ResetResponseIes.ValidateAll() if the designated constraints
// aren't met.
type ResetResponseIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetResponseIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetResponseIesMultiError) AllErrors() []error { return m }

// ResetResponseIesValidationError is the validation error returned by
// ResetResponseIes.Validate if the designated constraints aren't met.
type ResetResponseIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetResponseIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetResponseIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetResponseIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetResponseIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetResponseIesValidationError) ErrorName() string { return "ResetResponseIesValidationError" }

// Error satisfies the builtin error interface
func (e ResetResponseIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetResponseIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetResponseIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetResponseIesValidationError{}

// Validate checks the field values on RicserviceUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicserviceUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicserviceUpdateMultiError, or nil if none found.
func (m *RicserviceUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicserviceUpdateMultiError(errors)
	}
	return nil
}

// RicserviceUpdateMultiError is an error wrapping multiple validation errors
// returned by RicserviceUpdate.ValidateAll() if the designated constraints
// aren't met.
type RicserviceUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateMultiError) AllErrors() []error { return m }

// RicserviceUpdateValidationError is the validation error returned by
// RicserviceUpdate.Validate if the designated constraints aren't met.
type RicserviceUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateValidationError) ErrorName() string { return "RicserviceUpdateValidationError" }

// Error satisfies the builtin error interface
func (e RicserviceUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateValidationError{}

// Validate checks the field values on RicserviceUpdateIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdateIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicserviceUpdateIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicserviceUpdateIesMultiError, or nil if none found.
func (m *RicserviceUpdateIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdateIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes10()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateIesValidationError{
					field:  "E2ApProtocolIes10",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateIesValidationError{
					field:  "E2ApProtocolIes10",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes10()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIesValidationError{
				field:  "E2ApProtocolIes10",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes12()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateIesValidationError{
					field:  "E2ApProtocolIes12",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateIesValidationError{
					field:  "E2ApProtocolIes12",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes12()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIesValidationError{
				field:  "E2ApProtocolIes12",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes11()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateIesValidationError{
					field:  "E2ApProtocolIes11",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateIesValidationError{
					field:  "E2ApProtocolIes11",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes11()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIesValidationError{
				field:  "E2ApProtocolIes11",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicserviceUpdateIesMultiError(errors)
	}
	return nil
}

// RicserviceUpdateIesMultiError is an error wrapping multiple validation
// errors returned by RicserviceUpdateIes.ValidateAll() if the designated
// constraints aren't met.
type RicserviceUpdateIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateIesMultiError) AllErrors() []error { return m }

// RicserviceUpdateIesValidationError is the validation error returned by
// RicserviceUpdateIes.Validate if the designated constraints aren't met.
type RicserviceUpdateIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateIesValidationError) ErrorName() string {
	return "RicserviceUpdateIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateIesValidationError{}

// Validate checks the field values on RanfunctionsList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionsList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionsList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionsListMultiError, or nil if none found.
func (m *RanfunctionsList) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionsList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) > 16 {
		err := RanfunctionsListValidationError{
			field:  "Value",
			reason: "value must contain no more than 16 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionsListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionsListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionsListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionsListMultiError(errors)
	}
	return nil
}

// RanfunctionsListMultiError is an error wrapping multiple validation errors
// returned by RanfunctionsList.ValidateAll() if the designated constraints
// aren't met.
type RanfunctionsListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionsListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionsListMultiError) AllErrors() []error { return m }

// RanfunctionsListValidationError is the validation error returned by
// RanfunctionsList.Validate if the designated constraints aren't met.
type RanfunctionsListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionsListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionsListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionsListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionsListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionsListValidationError) ErrorName() string { return "RanfunctionsListValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionsListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionsList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionsListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionsListValidationError{}

// Validate checks the field values on RanfunctionItemIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionItemIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionItemIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionItemIesMultiError, or nil if none found.
func (m *RanfunctionItemIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionItemIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes10()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionItemIesValidationError{
					field:  "E2ApProtocolIes10",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionItemIesValidationError{
					field:  "E2ApProtocolIes10",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes10()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionItemIesValidationError{
				field:  "E2ApProtocolIes10",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanfunctionItemIesMultiError(errors)
	}
	return nil
}

// RanfunctionItemIesMultiError is an error wrapping multiple validation errors
// returned by RanfunctionItemIes.ValidateAll() if the designated constraints
// aren't met.
type RanfunctionItemIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionItemIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionItemIesMultiError) AllErrors() []error { return m }

// RanfunctionItemIesValidationError is the validation error returned by
// RanfunctionItemIes.Validate if the designated constraints aren't met.
type RanfunctionItemIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionItemIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionItemIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionItemIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionItemIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionItemIesValidationError) ErrorName() string {
	return "RanfunctionItemIesValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionItemIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionItemIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionItemIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionItemIesValidationError{}

// Validate checks the field values on RanfunctionItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionItemMultiError, or nil if none found.
func (m *RanfunctionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanFunctionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionItemValidationError{
					field:  "RanFunctionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionItemValidationError{
					field:  "RanFunctionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanFunctionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionItemValidationError{
				field:  "RanFunctionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanFunctionDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionItemValidationError{
					field:  "RanFunctionDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionItemValidationError{
					field:  "RanFunctionDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanFunctionDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionItemValidationError{
				field:  "RanFunctionDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanFunctionRevision()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionItemValidationError{
					field:  "RanFunctionRevision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionItemValidationError{
					field:  "RanFunctionRevision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanFunctionRevision()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionItemValidationError{
				field:  "RanFunctionRevision",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanfunctionItemMultiError(errors)
	}
	return nil
}

// RanfunctionItemMultiError is an error wrapping multiple validation errors
// returned by RanfunctionItem.ValidateAll() if the designated constraints
// aren't met.
type RanfunctionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionItemMultiError) AllErrors() []error { return m }

// RanfunctionItemValidationError is the validation error returned by
// RanfunctionItem.Validate if the designated constraints aren't met.
type RanfunctionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionItemValidationError) ErrorName() string { return "RanfunctionItemValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionItemValidationError{}

// Validate checks the field values on RanfunctionsIdList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionsIdList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionsIdList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionsIdListMultiError, or nil if none found.
func (m *RanfunctionsIdList) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionsIdList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionsIdListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionsIdListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionsIdListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionsIdListMultiError(errors)
	}
	return nil
}

// RanfunctionsIdListMultiError is an error wrapping multiple validation errors
// returned by RanfunctionsIdList.ValidateAll() if the designated constraints
// aren't met.
type RanfunctionsIdListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionsIdListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionsIdListMultiError) AllErrors() []error { return m }

// RanfunctionsIdListValidationError is the validation error returned by
// RanfunctionsIdList.Validate if the designated constraints aren't met.
type RanfunctionsIdListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionsIdListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionsIdListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionsIdListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionsIdListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionsIdListValidationError) ErrorName() string {
	return "RanfunctionsIdListValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionsIdListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionsIdList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionsIdListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionsIdListValidationError{}

// Validate checks the field values on RanfunctionIdItemIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionIdItemIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionIdItemIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionIdItemIesMultiError, or nil if none found.
func (m *RanfunctionIdItemIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionIdItemIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanFunctionIdItemIes6()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionIdItemIesValidationError{
					field:  "RanFunctionIdItemIes6",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionIdItemIesValidationError{
					field:  "RanFunctionIdItemIes6",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanFunctionIdItemIes6()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdItemIesValidationError{
				field:  "RanFunctionIdItemIes6",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanfunctionIdItemIesMultiError(errors)
	}
	return nil
}

// RanfunctionIdItemIesMultiError is an error wrapping multiple validation
// errors returned by RanfunctionIdItemIes.ValidateAll() if the designated
// constraints aren't met.
type RanfunctionIdItemIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionIdItemIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionIdItemIesMultiError) AllErrors() []error { return m }

// RanfunctionIdItemIesValidationError is the validation error returned by
// RanfunctionIdItemIes.Validate if the designated constraints aren't met.
type RanfunctionIdItemIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionIdItemIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionIdItemIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionIdItemIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionIdItemIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionIdItemIesValidationError) ErrorName() string {
	return "RanfunctionIdItemIesValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionIdItemIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionIdItemIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionIdItemIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionIdItemIesValidationError{}

// Validate checks the field values on RanfunctionIdItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionIdItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionIdItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionIdItemMultiError, or nil if none found.
func (m *RanfunctionIdItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionIdItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanFunctionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionIdItemValidationError{
					field:  "RanFunctionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionIdItemValidationError{
					field:  "RanFunctionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanFunctionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdItemValidationError{
				field:  "RanFunctionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanFunctionRevision()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionIdItemValidationError{
					field:  "RanFunctionRevision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionIdItemValidationError{
					field:  "RanFunctionRevision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanFunctionRevision()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdItemValidationError{
				field:  "RanFunctionRevision",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanfunctionIdItemMultiError(errors)
	}
	return nil
}

// RanfunctionIdItemMultiError is an error wrapping multiple validation errors
// returned by RanfunctionIdItem.ValidateAll() if the designated constraints
// aren't met.
type RanfunctionIdItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionIdItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionIdItemMultiError) AllErrors() []error { return m }

// RanfunctionIdItemValidationError is the validation error returned by
// RanfunctionIdItem.Validate if the designated constraints aren't met.
type RanfunctionIdItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionIdItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionIdItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionIdItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionIdItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionIdItemValidationError) ErrorName() string {
	return "RanfunctionIdItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionIdItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionIdItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionIdItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionIdItemValidationError{}

// Validate checks the field values on RicserviceUpdateAcknowledge with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdateAcknowledge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicserviceUpdateAcknowledge with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicserviceUpdateAcknowledgeMultiError, or nil if none found.
func (m *RicserviceUpdateAcknowledge) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdateAcknowledge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateAcknowledgeValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateAcknowledgeValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicserviceUpdateAcknowledgeMultiError(errors)
	}
	return nil
}

// RicserviceUpdateAcknowledgeMultiError is an error wrapping multiple
// validation errors returned by RicserviceUpdateAcknowledge.ValidateAll() if
// the designated constraints aren't met.
type RicserviceUpdateAcknowledgeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateAcknowledgeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateAcknowledgeMultiError) AllErrors() []error { return m }

// RicserviceUpdateAcknowledgeValidationError is the validation error returned
// by RicserviceUpdateAcknowledge.Validate if the designated constraints
// aren't met.
type RicserviceUpdateAcknowledgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateAcknowledgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateAcknowledgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateAcknowledgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateAcknowledgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateAcknowledgeValidationError) ErrorName() string {
	return "RicserviceUpdateAcknowledgeValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateAcknowledgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateAcknowledge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateAcknowledgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateAcknowledgeValidationError{}

// Validate checks the field values on RicserviceUpdateAcknowledgeIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdateAcknowledgeIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicserviceUpdateAcknowledgeIes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RicserviceUpdateAcknowledgeIesMultiError, or nil if none found.
func (m *RicserviceUpdateAcknowledgeIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdateAcknowledgeIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes9()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes9",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes9",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes9()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeIesValidationError{
				field:  "E2ApProtocolIes9",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes13()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes13",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateAcknowledgeIesValidationError{
					field:  "E2ApProtocolIes13",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes13()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeIesValidationError{
				field:  "E2ApProtocolIes13",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicserviceUpdateAcknowledgeIesMultiError(errors)
	}
	return nil
}

// RicserviceUpdateAcknowledgeIesMultiError is an error wrapping multiple
// validation errors returned by RicserviceUpdateAcknowledgeIes.ValidateAll()
// if the designated constraints aren't met.
type RicserviceUpdateAcknowledgeIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateAcknowledgeIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateAcknowledgeIesMultiError) AllErrors() []error { return m }

// RicserviceUpdateAcknowledgeIesValidationError is the validation error
// returned by RicserviceUpdateAcknowledgeIes.Validate if the designated
// constraints aren't met.
type RicserviceUpdateAcknowledgeIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateAcknowledgeIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateAcknowledgeIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateAcknowledgeIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateAcknowledgeIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateAcknowledgeIesValidationError) ErrorName() string {
	return "RicserviceUpdateAcknowledgeIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateAcknowledgeIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateAcknowledgeIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateAcknowledgeIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateAcknowledgeIesValidationError{}

// Validate checks the field values on RanfunctionsIdcauseList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionsIdcauseList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionsIdcauseList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionsIdcauseListMultiError, or nil if none found.
func (m *RanfunctionsIdcauseList) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionsIdcauseList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) > 256 {
		err := RanfunctionsIdcauseListValidationError{
			field:  "Value",
			reason: "value must contain no more than 256 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionsIdcauseListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionsIdcauseListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionsIdcauseListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionsIdcauseListMultiError(errors)
	}
	return nil
}

// RanfunctionsIdcauseListMultiError is an error wrapping multiple validation
// errors returned by RanfunctionsIdcauseList.ValidateAll() if the designated
// constraints aren't met.
type RanfunctionsIdcauseListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionsIdcauseListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionsIdcauseListMultiError) AllErrors() []error { return m }

// RanfunctionsIdcauseListValidationError is the validation error returned by
// RanfunctionsIdcauseList.Validate if the designated constraints aren't met.
type RanfunctionsIdcauseListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionsIdcauseListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionsIdcauseListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionsIdcauseListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionsIdcauseListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionsIdcauseListValidationError) ErrorName() string {
	return "RanfunctionsIdcauseListValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionsIdcauseListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionsIdcauseList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionsIdcauseListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionsIdcauseListValidationError{}

// Validate checks the field values on RanfunctionIdcauseItemIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionIdcauseItemIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionIdcauseItemIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionIdcauseItemIesMultiError, or nil if none found.
func (m *RanfunctionIdcauseItemIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionIdcauseItemIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanFunctionIdcauseItemIes7()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionIdcauseItemIesValidationError{
					field:  "RanFunctionIdcauseItemIes7",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionIdcauseItemIesValidationError{
					field:  "RanFunctionIdcauseItemIes7",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanFunctionIdcauseItemIes7()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdcauseItemIesValidationError{
				field:  "RanFunctionIdcauseItemIes7",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanfunctionIdcauseItemIesMultiError(errors)
	}
	return nil
}

// RanfunctionIdcauseItemIesMultiError is an error wrapping multiple validation
// errors returned by RanfunctionIdcauseItemIes.ValidateAll() if the
// designated constraints aren't met.
type RanfunctionIdcauseItemIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionIdcauseItemIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionIdcauseItemIesMultiError) AllErrors() []error { return m }

// RanfunctionIdcauseItemIesValidationError is the validation error returned by
// RanfunctionIdcauseItemIes.Validate if the designated constraints aren't met.
type RanfunctionIdcauseItemIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionIdcauseItemIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionIdcauseItemIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionIdcauseItemIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionIdcauseItemIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionIdcauseItemIesValidationError) ErrorName() string {
	return "RanfunctionIdcauseItemIesValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionIdcauseItemIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionIdcauseItemIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionIdcauseItemIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionIdcauseItemIesValidationError{}

// Validate checks the field values on RanfunctionIdcauseItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionIdcauseItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionIdcauseItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionIdcauseItemMultiError, or nil if none found.
func (m *RanfunctionIdcauseItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionIdcauseItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanFunctionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionIdcauseItemValidationError{
					field:  "RanFunctionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionIdcauseItemValidationError{
					field:  "RanFunctionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanFunctionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdcauseItemValidationError{
				field:  "RanFunctionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCause()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionIdcauseItemValidationError{
					field:  "Cause",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionIdcauseItemValidationError{
					field:  "Cause",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCause()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdcauseItemValidationError{
				field:  "Cause",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanfunctionIdcauseItemMultiError(errors)
	}
	return nil
}

// RanfunctionIdcauseItemMultiError is an error wrapping multiple validation
// errors returned by RanfunctionIdcauseItem.ValidateAll() if the designated
// constraints aren't met.
type RanfunctionIdcauseItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionIdcauseItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionIdcauseItemMultiError) AllErrors() []error { return m }

// RanfunctionIdcauseItemValidationError is the validation error returned by
// RanfunctionIdcauseItem.Validate if the designated constraints aren't met.
type RanfunctionIdcauseItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionIdcauseItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionIdcauseItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionIdcauseItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionIdcauseItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionIdcauseItemValidationError) ErrorName() string {
	return "RanfunctionIdcauseItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionIdcauseItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionIdcauseItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionIdcauseItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionIdcauseItemValidationError{}

// Validate checks the field values on RicserviceUpdateFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdateFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicserviceUpdateFailure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicserviceUpdateFailureMultiError, or nil if none found.
func (m *RicserviceUpdateFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdateFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateFailureValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateFailureValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicserviceUpdateFailureMultiError(errors)
	}
	return nil
}

// RicserviceUpdateFailureMultiError is an error wrapping multiple validation
// errors returned by RicserviceUpdateFailure.ValidateAll() if the designated
// constraints aren't met.
type RicserviceUpdateFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateFailureMultiError) AllErrors() []error { return m }

// RicserviceUpdateFailureValidationError is the validation error returned by
// RicserviceUpdateFailure.Validate if the designated constraints aren't met.
type RicserviceUpdateFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateFailureValidationError) ErrorName() string {
	return "RicserviceUpdateFailureValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateFailureValidationError{}

// Validate checks the field values on RicserviceUpdateFailureIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdateFailureIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicserviceUpdateFailureIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicserviceUpdateFailureIesMultiError, or nil if none found.
func (m *RicserviceUpdateFailureIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdateFailureIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes13()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateFailureIesValidationError{
					field:  "E2ApProtocolIes13",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateFailureIesValidationError{
					field:  "E2ApProtocolIes13",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes13()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIesValidationError{
				field:  "E2ApProtocolIes13",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes31()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateFailureIesValidationError{
					field:  "E2ApProtocolIes31",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateFailureIesValidationError{
					field:  "E2ApProtocolIes31",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes31()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIesValidationError{
				field:  "E2ApProtocolIes31",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2ApProtocolIes2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateFailureIesValidationError{
					field:  "E2ApProtocolIes2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateFailureIesValidationError{
					field:  "E2ApProtocolIes2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2ApProtocolIes2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIesValidationError{
				field:  "E2ApProtocolIes2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicserviceUpdateFailureIesMultiError(errors)
	}
	return nil
}

// RicserviceUpdateFailureIesMultiError is an error wrapping multiple
// validation errors returned by RicserviceUpdateFailureIes.ValidateAll() if
// the designated constraints aren't met.
type RicserviceUpdateFailureIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateFailureIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateFailureIesMultiError) AllErrors() []error { return m }

// RicserviceUpdateFailureIesValidationError is the validation error returned
// by RicserviceUpdateFailureIes.Validate if the designated constraints aren't met.
type RicserviceUpdateFailureIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateFailureIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateFailureIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateFailureIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateFailureIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateFailureIesValidationError) ErrorName() string {
	return "RicserviceUpdateFailureIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateFailureIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateFailureIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateFailureIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateFailureIesValidationError{}

// Validate checks the field values on RicserviceQuery with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RicserviceQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicserviceQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicserviceQueryMultiError, or nil if none found.
func (m *RicserviceQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolIes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceQueryValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceQueryValidationError{
					field:  "ProtocolIes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceQueryValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicserviceQueryMultiError(errors)
	}
	return nil
}

// RicserviceQueryMultiError is an error wrapping multiple validation errors
// returned by RicserviceQuery.ValidateAll() if the designated constraints
// aren't met.
type RicserviceQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceQueryMultiError) AllErrors() []error { return m }

// RicserviceQueryValidationError is the validation error returned by
// RicserviceQuery.Validate if the designated constraints aren't met.
type RicserviceQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceQueryValidationError) ErrorName() string { return "RicserviceQueryValidationError" }

// Error satisfies the builtin error interface
func (e RicserviceQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceQueryValidationError{}

// Validate checks the field values on RicserviceQueryIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicserviceQueryIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicserviceQueryIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicserviceQueryIesMultiError, or nil if none found.
func (m *RicserviceQueryIes) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceQueryIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicserviceQueryIes9()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceQueryIesValidationError{
					field:  "RicserviceQueryIes9",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceQueryIesValidationError{
					field:  "RicserviceQueryIes9",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicserviceQueryIes9()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceQueryIesValidationError{
				field:  "RicserviceQueryIes9",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicserviceQueryIesMultiError(errors)
	}
	return nil
}

// RicserviceQueryIesMultiError is an error wrapping multiple validation errors
// returned by RicserviceQueryIes.ValidateAll() if the designated constraints
// aren't met.
type RicserviceQueryIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceQueryIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceQueryIesMultiError) AllErrors() []error { return m }

// RicserviceQueryIesValidationError is the validation error returned by
// RicserviceQueryIes.Validate if the designated constraints aren't met.
type RicserviceQueryIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceQueryIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceQueryIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceQueryIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceQueryIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceQueryIesValidationError) ErrorName() string {
	return "RicserviceQueryIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceQueryIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceQueryIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceQueryIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceQueryIesValidationError{}

// Validate checks the field values on
// RicsubscriptionRequestIes_RicsubscriptionRequestIes29 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionRequestIes_RicsubscriptionRequestIes29) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionRequestIes_RicsubscriptionRequestIes29 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionRequestIes_RicsubscriptionRequestIes29MultiError, or nil if
// none found.
func (m *RicsubscriptionRequestIes_RicsubscriptionRequestIes29) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionRequestIes_RicsubscriptionRequestIes29) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 29 {
		err := RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError{
			field:  "Id",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionRequestIes_RicsubscriptionRequestIes29MultiError(errors)
	}
	return nil
}

// RicsubscriptionRequestIes_RicsubscriptionRequestIes29MultiError is an error
// wrapping multiple validation errors returned by
// RicsubscriptionRequestIes_RicsubscriptionRequestIes29.ValidateAll() if the
// designated constraints aren't met.
type RicsubscriptionRequestIes_RicsubscriptionRequestIes29MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionRequestIes_RicsubscriptionRequestIes29MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionRequestIes_RicsubscriptionRequestIes29MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError is the
// validation error returned by
// RicsubscriptionRequestIes_RicsubscriptionRequestIes29.Validate if the
// designated constraints aren't met.
type RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError) ErrorName() string {
	return "RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionRequestIes_RicsubscriptionRequestIes29.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionRequestIes_RicsubscriptionRequestIes29ValidationError{}

// Validate checks the field values on
// RicsubscriptionRequestIes_RicsubscriptionRequestIes5 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionRequestIes_RicsubscriptionRequestIes5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionRequestIes_RicsubscriptionRequestIes5 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RicsubscriptionRequestIes_RicsubscriptionRequestIes5MultiError, or nil if
// none found.
func (m *RicsubscriptionRequestIes_RicsubscriptionRequestIes5) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionRequestIes_RicsubscriptionRequestIes5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 5 {
		err := RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError{
			field:  "Id",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionRequestIes_RicsubscriptionRequestIes5MultiError(errors)
	}
	return nil
}

// RicsubscriptionRequestIes_RicsubscriptionRequestIes5MultiError is an error
// wrapping multiple validation errors returned by
// RicsubscriptionRequestIes_RicsubscriptionRequestIes5.ValidateAll() if the
// designated constraints aren't met.
type RicsubscriptionRequestIes_RicsubscriptionRequestIes5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionRequestIes_RicsubscriptionRequestIes5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionRequestIes_RicsubscriptionRequestIes5MultiError) AllErrors() []error { return m }

// RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError is the
// validation error returned by
// RicsubscriptionRequestIes_RicsubscriptionRequestIes5.Validate if the
// designated constraints aren't met.
type RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError) ErrorName() string {
	return "RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionRequestIes_RicsubscriptionRequestIes5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionRequestIes_RicsubscriptionRequestIes5ValidationError{}

// Validate checks the field values on
// RicsubscriptionRequestIes_RicsubscriptionRequestIes30 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionRequestIes_RicsubscriptionRequestIes30) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionRequestIes_RicsubscriptionRequestIes30 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionRequestIes_RicsubscriptionRequestIes30MultiError, or nil if
// none found.
func (m *RicsubscriptionRequestIes_RicsubscriptionRequestIes30) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionRequestIes_RicsubscriptionRequestIes30) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 30 {
		err := RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError{
			field:  "Id",
			reason: "value must equal 30",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionRequestIes_RicsubscriptionRequestIes30MultiError(errors)
	}
	return nil
}

// RicsubscriptionRequestIes_RicsubscriptionRequestIes30MultiError is an error
// wrapping multiple validation errors returned by
// RicsubscriptionRequestIes_RicsubscriptionRequestIes30.ValidateAll() if the
// designated constraints aren't met.
type RicsubscriptionRequestIes_RicsubscriptionRequestIes30MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionRequestIes_RicsubscriptionRequestIes30MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionRequestIes_RicsubscriptionRequestIes30MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError is the
// validation error returned by
// RicsubscriptionRequestIes_RicsubscriptionRequestIes30.Validate if the
// designated constraints aren't met.
type RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError) ErrorName() string {
	return "RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionRequestIes_RicsubscriptionRequestIes30.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionRequestIes_RicsubscriptionRequestIes30ValidationError{}

// Validate checks the field values on
// RicsubscriptionResponseIes_RicsubscriptionResponseIes29 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes29) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionResponseIes_RicsubscriptionResponseIes29 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionResponseIes_RicsubscriptionResponseIes29MultiError, or nil
// if none found.
func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes29) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes29) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 29 {
		err := RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError{
			field:  "Id",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionResponseIes_RicsubscriptionResponseIes29MultiError(errors)
	}
	return nil
}

// RicsubscriptionResponseIes_RicsubscriptionResponseIes29MultiError is an
// error wrapping multiple validation errors returned by
// RicsubscriptionResponseIes_RicsubscriptionResponseIes29.ValidateAll() if
// the designated constraints aren't met.
type RicsubscriptionResponseIes_RicsubscriptionResponseIes29MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionResponseIes_RicsubscriptionResponseIes29MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionResponseIes_RicsubscriptionResponseIes29MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError is
// the validation error returned by
// RicsubscriptionResponseIes_RicsubscriptionResponseIes29.Validate if the
// designated constraints aren't met.
type RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError) ErrorName() string {
	return "RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionResponseIes_RicsubscriptionResponseIes29.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionResponseIes_RicsubscriptionResponseIes29ValidationError{}

// Validate checks the field values on
// RicsubscriptionResponseIes_RicsubscriptionResponseIes5 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionResponseIes_RicsubscriptionResponseIes5 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionResponseIes_RicsubscriptionResponseIes5MultiError, or nil if
// none found.
func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes5) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 5 {
		err := RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError{
			field:  "Id",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionResponseIes_RicsubscriptionResponseIes5MultiError(errors)
	}
	return nil
}

// RicsubscriptionResponseIes_RicsubscriptionResponseIes5MultiError is an error
// wrapping multiple validation errors returned by
// RicsubscriptionResponseIes_RicsubscriptionResponseIes5.ValidateAll() if the
// designated constraints aren't met.
type RicsubscriptionResponseIes_RicsubscriptionResponseIes5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionResponseIes_RicsubscriptionResponseIes5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionResponseIes_RicsubscriptionResponseIes5MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError is the
// validation error returned by
// RicsubscriptionResponseIes_RicsubscriptionResponseIes5.Validate if the
// designated constraints aren't met.
type RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError) ErrorName() string {
	return "RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionResponseIes_RicsubscriptionResponseIes5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionResponseIes_RicsubscriptionResponseIes5ValidationError{}

// Validate checks the field values on
// RicsubscriptionResponseIes_RicsubscriptionResponseIes17 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes17) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionResponseIes_RicsubscriptionResponseIes17 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionResponseIes_RicsubscriptionResponseIes17MultiError, or nil
// if none found.
func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes17) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes17) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 17 {
		err := RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError{
			field:  "Id",
			reason: "value must equal 17",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionResponseIes_RicsubscriptionResponseIes17MultiError(errors)
	}
	return nil
}

// RicsubscriptionResponseIes_RicsubscriptionResponseIes17MultiError is an
// error wrapping multiple validation errors returned by
// RicsubscriptionResponseIes_RicsubscriptionResponseIes17.ValidateAll() if
// the designated constraints aren't met.
type RicsubscriptionResponseIes_RicsubscriptionResponseIes17MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionResponseIes_RicsubscriptionResponseIes17MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionResponseIes_RicsubscriptionResponseIes17MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError is
// the validation error returned by
// RicsubscriptionResponseIes_RicsubscriptionResponseIes17.Validate if the
// designated constraints aren't met.
type RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError) ErrorName() string {
	return "RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionResponseIes_RicsubscriptionResponseIes17.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionResponseIes_RicsubscriptionResponseIes17ValidationError{}

// Validate checks the field values on
// RicsubscriptionResponseIes_RicsubscriptionResponseIes18 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes18) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionResponseIes_RicsubscriptionResponseIes18 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionResponseIes_RicsubscriptionResponseIes18MultiError, or nil
// if none found.
func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes18) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes18) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 18 {
		err := RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError{
			field:  "Id",
			reason: "value must equal 18",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionResponseIes_RicsubscriptionResponseIes18MultiError(errors)
	}
	return nil
}

// RicsubscriptionResponseIes_RicsubscriptionResponseIes18MultiError is an
// error wrapping multiple validation errors returned by
// RicsubscriptionResponseIes_RicsubscriptionResponseIes18.ValidateAll() if
// the designated constraints aren't met.
type RicsubscriptionResponseIes_RicsubscriptionResponseIes18MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionResponseIes_RicsubscriptionResponseIes18MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionResponseIes_RicsubscriptionResponseIes18MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError is
// the validation error returned by
// RicsubscriptionResponseIes_RicsubscriptionResponseIes18.Validate if the
// designated constraints aren't met.
type RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError) ErrorName() string {
	return "RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionResponseIes_RicsubscriptionResponseIes18.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionResponseIes_RicsubscriptionResponseIes18ValidationError{}

// Validate checks the field values on
// RicsubscriptionFailureIes_RicsubscriptionFailureIes29 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes29) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionFailureIes_RicsubscriptionFailureIes29 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionFailureIes_RicsubscriptionFailureIes29MultiError, or nil if
// none found.
func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes29) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes29) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 29 {
		err := RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError{
			field:  "Id",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionFailureIes_RicsubscriptionFailureIes29MultiError(errors)
	}
	return nil
}

// RicsubscriptionFailureIes_RicsubscriptionFailureIes29MultiError is an error
// wrapping multiple validation errors returned by
// RicsubscriptionFailureIes_RicsubscriptionFailureIes29.ValidateAll() if the
// designated constraints aren't met.
type RicsubscriptionFailureIes_RicsubscriptionFailureIes29MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionFailureIes_RicsubscriptionFailureIes29MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionFailureIes_RicsubscriptionFailureIes29MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError is the
// validation error returned by
// RicsubscriptionFailureIes_RicsubscriptionFailureIes29.Validate if the
// designated constraints aren't met.
type RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError) ErrorName() string {
	return "RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionFailureIes_RicsubscriptionFailureIes29.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionFailureIes_RicsubscriptionFailureIes29ValidationError{}

// Validate checks the field values on
// RicsubscriptionFailureIes_RicsubscriptionFailureIes5 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionFailureIes_RicsubscriptionFailureIes5 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RicsubscriptionFailureIes_RicsubscriptionFailureIes5MultiError, or nil if
// none found.
func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes5) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 5 {
		err := RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError{
			field:  "Id",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionFailureIes_RicsubscriptionFailureIes5MultiError(errors)
	}
	return nil
}

// RicsubscriptionFailureIes_RicsubscriptionFailureIes5MultiError is an error
// wrapping multiple validation errors returned by
// RicsubscriptionFailureIes_RicsubscriptionFailureIes5.ValidateAll() if the
// designated constraints aren't met.
type RicsubscriptionFailureIes_RicsubscriptionFailureIes5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionFailureIes_RicsubscriptionFailureIes5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionFailureIes_RicsubscriptionFailureIes5MultiError) AllErrors() []error { return m }

// RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError is the
// validation error returned by
// RicsubscriptionFailureIes_RicsubscriptionFailureIes5.Validate if the
// designated constraints aren't met.
type RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError) ErrorName() string {
	return "RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionFailureIes_RicsubscriptionFailureIes5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionFailureIes_RicsubscriptionFailureIes5ValidationError{}

// Validate checks the field values on
// RicsubscriptionFailureIes_RicsubscriptionFailureIes18 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes18) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionFailureIes_RicsubscriptionFailureIes18 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionFailureIes_RicsubscriptionFailureIes18MultiError, or nil if
// none found.
func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes18) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes18) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 18 {
		err := RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError{
			field:  "Id",
			reason: "value must equal 18",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionFailureIes_RicsubscriptionFailureIes18MultiError(errors)
	}
	return nil
}

// RicsubscriptionFailureIes_RicsubscriptionFailureIes18MultiError is an error
// wrapping multiple validation errors returned by
// RicsubscriptionFailureIes_RicsubscriptionFailureIes18.ValidateAll() if the
// designated constraints aren't met.
type RicsubscriptionFailureIes_RicsubscriptionFailureIes18MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionFailureIes_RicsubscriptionFailureIes18MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionFailureIes_RicsubscriptionFailureIes18MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError is the
// validation error returned by
// RicsubscriptionFailureIes_RicsubscriptionFailureIes18.Validate if the
// designated constraints aren't met.
type RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError) ErrorName() string {
	return "RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionFailureIes_RicsubscriptionFailureIes18.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionFailureIes_RicsubscriptionFailureIes18ValidationError{}

// Validate checks the field values on
// RicsubscriptionFailureIes_RicsubscriptionFailureIes2 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionFailureIes_RicsubscriptionFailureIes2 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RicsubscriptionFailureIes_RicsubscriptionFailureIes2MultiError, or nil if
// none found.
func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes2) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 2 {
		err := RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError{
			field:  "Id",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionFailureIes_RicsubscriptionFailureIes2MultiError(errors)
	}
	return nil
}

// RicsubscriptionFailureIes_RicsubscriptionFailureIes2MultiError is an error
// wrapping multiple validation errors returned by
// RicsubscriptionFailureIes_RicsubscriptionFailureIes2.ValidateAll() if the
// designated constraints aren't met.
type RicsubscriptionFailureIes_RicsubscriptionFailureIes2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionFailureIes_RicsubscriptionFailureIes2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionFailureIes_RicsubscriptionFailureIes2MultiError) AllErrors() []error { return m }

// RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError is the
// validation error returned by
// RicsubscriptionFailureIes_RicsubscriptionFailureIes2.Validate if the
// designated constraints aren't met.
type RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError) ErrorName() string {
	return "RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionFailureIes_RicsubscriptionFailureIes2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionFailureIes_RicsubscriptionFailureIes2ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29MultiError,
// or nil if none found.
func (m *RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 29 {
		err := RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError{
			field:  "Id",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29MultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29MultiError
// is an error wrapping multiple validation errors returned by
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29.ValidateAll()
// if the designated constraints aren't met.
type RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError
// is the validation error returned by
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes29ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5MultiError,
// or nil if none found.
func (m *RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 5 {
		err := RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError{
			field:  "Id",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5MultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5MultiError
// is an error wrapping multiple validation errors returned by
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5.ValidateAll()
// if the designated constraints aren't met.
type RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError
// is the validation error returned by
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes5ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29MultiError,
// or nil if none found.
func (m *RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 29 {
		err := RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError{
			field:  "Id",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29MultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29MultiError
// is an error wrapping multiple validation errors returned by
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29.ValidateAll()
// if the designated constraints aren't met.
type RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError
// is the validation error returned by
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes29ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5MultiError,
// or nil if none found.
func (m *RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 5 {
		err := RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError{
			field:  "Id",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5MultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5MultiError
// is an error wrapping multiple validation errors returned by
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5.ValidateAll()
// if the designated constraints aren't met.
type RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError
// is the validation error returned by
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes5ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29MultiError,
// or nil if none found.
func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 29 {
		err := RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError{
			field:  "Id",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29MultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29MultiError
// is an error wrapping multiple validation errors returned by
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29.ValidateAll()
// if the designated constraints aren't met.
type RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError
// is the validation error returned by
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes29ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5MultiError,
// or nil if none found.
func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 5 {
		err := RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError{
			field:  "Id",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5MultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5MultiError
// is an error wrapping multiple validation errors returned by
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5.ValidateAll()
// if the designated constraints aren't met.
type RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError
// is the validation error returned by
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes5ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1MultiError,
// or nil if none found.
func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 1 {
		err := RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError{
			field:  "Id",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1MultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1MultiError
// is an error wrapping multiple validation errors returned by
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1.ValidateAll()
// if the designated constraints aren't met.
type RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError
// is the validation error returned by
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes1ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2MultiError,
// or nil if none found.
func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 2 {
		err := RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError{
			field:  "Id",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2MultiError(errors)
	}
	return nil
}

// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2MultiError
// is an error wrapping multiple validation errors returned by
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2.ValidateAll()
// if the designated constraints aren't met.
type RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2MultiError) AllErrors() []error {
	return m
}

// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError
// is the validation error returned by
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes2ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes29 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RicindicationIes_RicindicationIes29) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicindicationIes_RicindicationIes29
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RicindicationIes_RicindicationIes29MultiError, or nil if none found.
func (m *RicindicationIes_RicindicationIes29) ValidateAll() error {
	return m.validate(true)
}

func (m *RicindicationIes_RicindicationIes29) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 29 {
		err := RicindicationIes_RicindicationIes29ValidationError{
			field:  "Id",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicindicationIes_RicindicationIes29ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes29ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicindicationIes_RicindicationIes29ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicindicationIes_RicindicationIes29MultiError(errors)
	}
	return nil
}

// RicindicationIes_RicindicationIes29MultiError is an error wrapping multiple
// validation errors returned by
// RicindicationIes_RicindicationIes29.ValidateAll() if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes29MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicindicationIes_RicindicationIes29MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicindicationIes_RicindicationIes29MultiError) AllErrors() []error { return m }

// RicindicationIes_RicindicationIes29ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes29.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes29ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes29ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes29ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes29ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes29ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes29ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes29ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes29ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes29.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes29ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes29ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes5 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RicindicationIes_RicindicationIes5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicindicationIes_RicindicationIes5
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RicindicationIes_RicindicationIes5MultiError, or nil if none found.
func (m *RicindicationIes_RicindicationIes5) ValidateAll() error {
	return m.validate(true)
}

func (m *RicindicationIes_RicindicationIes5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 5 {
		err := RicindicationIes_RicindicationIes5ValidationError{
			field:  "Id",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicindicationIes_RicindicationIes5ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes5ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicindicationIes_RicindicationIes5ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicindicationIes_RicindicationIes5MultiError(errors)
	}
	return nil
}

// RicindicationIes_RicindicationIes5MultiError is an error wrapping multiple
// validation errors returned by
// RicindicationIes_RicindicationIes5.ValidateAll() if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicindicationIes_RicindicationIes5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicindicationIes_RicindicationIes5MultiError) AllErrors() []error { return m }

// RicindicationIes_RicindicationIes5ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes5.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes5ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes5ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes5ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes5ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes5ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes5ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes5ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes15 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RicindicationIes_RicindicationIes15) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicindicationIes_RicindicationIes15
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RicindicationIes_RicindicationIes15MultiError, or nil if none found.
func (m *RicindicationIes_RicindicationIes15) ValidateAll() error {
	return m.validate(true)
}

func (m *RicindicationIes_RicindicationIes15) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 15 {
		err := RicindicationIes_RicindicationIes15ValidationError{
			field:  "Id",
			reason: "value must equal 15",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicindicationIes_RicindicationIes15ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes15ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes15ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes15ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicindicationIes_RicindicationIes15ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicindicationIes_RicindicationIes15MultiError(errors)
	}
	return nil
}

// RicindicationIes_RicindicationIes15MultiError is an error wrapping multiple
// validation errors returned by
// RicindicationIes_RicindicationIes15.ValidateAll() if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes15MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicindicationIes_RicindicationIes15MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicindicationIes_RicindicationIes15MultiError) AllErrors() []error { return m }

// RicindicationIes_RicindicationIes15ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes15.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes15ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes15ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes15ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes15ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes15ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes15ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes15ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes15ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes15.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes15ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes15ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes27 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RicindicationIes_RicindicationIes27) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicindicationIes_RicindicationIes27
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RicindicationIes_RicindicationIes27MultiError, or nil if none found.
func (m *RicindicationIes_RicindicationIes27) ValidateAll() error {
	return m.validate(true)
}

func (m *RicindicationIes_RicindicationIes27) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 27 {
		err := RicindicationIes_RicindicationIes27ValidationError{
			field:  "Id",
			reason: "value must equal 27",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicindicationIes_RicindicationIes27ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes27ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes27ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes27ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RicindicationIes_RicindicationIes27ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicindicationIes_RicindicationIes27MultiError(errors)
	}
	return nil
}

// RicindicationIes_RicindicationIes27MultiError is an error wrapping multiple
// validation errors returned by
// RicindicationIes_RicindicationIes27.ValidateAll() if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes27MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicindicationIes_RicindicationIes27MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicindicationIes_RicindicationIes27MultiError) AllErrors() []error { return m }

// RicindicationIes_RicindicationIes27ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes27.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes27ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes27ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes27ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes27ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes27ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes27ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes27ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes27ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes27.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes27ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes27ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes28 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RicindicationIes_RicindicationIes28) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicindicationIes_RicindicationIes28
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RicindicationIes_RicindicationIes28MultiError, or nil if none found.
func (m *RicindicationIes_RicindicationIes28) ValidateAll() error {
	return m.validate(true)
}

func (m *RicindicationIes_RicindicationIes28) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 28 {
		err := RicindicationIes_RicindicationIes28ValidationError{
			field:  "Id",
			reason: "value must equal 28",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicindicationIes_RicindicationIes28ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if m.GetPresence() != 2 {
		err := RicindicationIes_RicindicationIes28ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicindicationIes_RicindicationIes28MultiError(errors)
	}
	return nil
}

// RicindicationIes_RicindicationIes28MultiError is an error wrapping multiple
// validation errors returned by
// RicindicationIes_RicindicationIes28.ValidateAll() if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes28MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicindicationIes_RicindicationIes28MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicindicationIes_RicindicationIes28MultiError) AllErrors() []error { return m }

// RicindicationIes_RicindicationIes28ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes28.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes28ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes28ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes28ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes28ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes28ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes28ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes28ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes28ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes28.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes28ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes28ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes25 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RicindicationIes_RicindicationIes25) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicindicationIes_RicindicationIes25
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RicindicationIes_RicindicationIes25MultiError, or nil if none found.
func (m *RicindicationIes_RicindicationIes25) ValidateAll() error {
	return m.validate(true)
}

func (m *RicindicationIes_RicindicationIes25) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 25 {
		err := RicindicationIes_RicindicationIes25ValidationError{
			field:  "Id",
			reason: "value must equal 25",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicindicationIes_RicindicationIes25ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes25ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes25ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes25ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicindicationIes_RicindicationIes25ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicindicationIes_RicindicationIes25MultiError(errors)
	}
	return nil
}

// RicindicationIes_RicindicationIes25MultiError is an error wrapping multiple
// validation errors returned by
// RicindicationIes_RicindicationIes25.ValidateAll() if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes25MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicindicationIes_RicindicationIes25MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicindicationIes_RicindicationIes25MultiError) AllErrors() []error { return m }

// RicindicationIes_RicindicationIes25ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes25.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes25ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes25ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes25ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes25ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes25ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes25ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes25ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes25ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes25.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes25ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes25ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes26 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RicindicationIes_RicindicationIes26) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicindicationIes_RicindicationIes26
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RicindicationIes_RicindicationIes26MultiError, or nil if none found.
func (m *RicindicationIes_RicindicationIes26) ValidateAll() error {
	return m.validate(true)
}

func (m *RicindicationIes_RicindicationIes26) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 26 {
		err := RicindicationIes_RicindicationIes26ValidationError{
			field:  "Id",
			reason: "value must equal 26",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicindicationIes_RicindicationIes26ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes26ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes26ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes26ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RicindicationIes_RicindicationIes26ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicindicationIes_RicindicationIes26MultiError(errors)
	}
	return nil
}

// RicindicationIes_RicindicationIes26MultiError is an error wrapping multiple
// validation errors returned by
// RicindicationIes_RicindicationIes26.ValidateAll() if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes26MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicindicationIes_RicindicationIes26MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicindicationIes_RicindicationIes26MultiError) AllErrors() []error { return m }

// RicindicationIes_RicindicationIes26ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes26.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes26ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes26ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes26ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes26ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes26ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes26ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes26ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes26ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes26.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes26ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes26ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes20 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RicindicationIes_RicindicationIes20) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicindicationIes_RicindicationIes20
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RicindicationIes_RicindicationIes20MultiError, or nil if none found.
func (m *RicindicationIes_RicindicationIes20) ValidateAll() error {
	return m.validate(true)
}

func (m *RicindicationIes_RicindicationIes20) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 20 {
		err := RicindicationIes_RicindicationIes20ValidationError{
			field:  "Id",
			reason: "value must equal 20",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicindicationIes_RicindicationIes20ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes20ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicindicationIes_RicindicationIes20ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes20ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RicindicationIes_RicindicationIes20ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicindicationIes_RicindicationIes20MultiError(errors)
	}
	return nil
}

// RicindicationIes_RicindicationIes20MultiError is an error wrapping multiple
// validation errors returned by
// RicindicationIes_RicindicationIes20.ValidateAll() if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes20MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicindicationIes_RicindicationIes20MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicindicationIes_RicindicationIes20MultiError) AllErrors() []error { return m }

// RicindicationIes_RicindicationIes20ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes20.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes20ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes20ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes20ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes20ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes20ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes20ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes20ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes20ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes20.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes20ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes20ValidationError{}

// Validate checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes29 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RiccontrolRequestIes_RiccontrolRequestIes29) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes29 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RiccontrolRequestIes_RiccontrolRequestIes29MultiError, or nil if none found.
func (m *RiccontrolRequestIes_RiccontrolRequestIes29) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolRequestIes_RiccontrolRequestIes29) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 29 {
		err := RiccontrolRequestIes_RiccontrolRequestIes29ValidationError{
			field:  "Id",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolRequestIes_RiccontrolRequestIes29ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolRequestIes_RiccontrolRequestIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolRequestIes_RiccontrolRequestIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes29ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RiccontrolRequestIes_RiccontrolRequestIes29ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolRequestIes_RiccontrolRequestIes29MultiError(errors)
	}
	return nil
}

// RiccontrolRequestIes_RiccontrolRequestIes29MultiError is an error wrapping
// multiple validation errors returned by
// RiccontrolRequestIes_RiccontrolRequestIes29.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes29MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolRequestIes_RiccontrolRequestIes29MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolRequestIes_RiccontrolRequestIes29MultiError) AllErrors() []error { return m }

// RiccontrolRequestIes_RiccontrolRequestIes29ValidationError is the validation
// error returned by RiccontrolRequestIes_RiccontrolRequestIes29.Validate if
// the designated constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes29ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIes_RiccontrolRequestIes29ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIes_RiccontrolRequestIes29ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIes_RiccontrolRequestIes29ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIes_RiccontrolRequestIes29ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIes_RiccontrolRequestIes29ValidationError) ErrorName() string {
	return "RiccontrolRequestIes_RiccontrolRequestIes29ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIes_RiccontrolRequestIes29ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes_RiccontrolRequestIes29.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIes_RiccontrolRequestIes29ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIes_RiccontrolRequestIes29ValidationError{}

// Validate checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes5 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RiccontrolRequestIes_RiccontrolRequestIes5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes5 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RiccontrolRequestIes_RiccontrolRequestIes5MultiError, or nil if none found.
func (m *RiccontrolRequestIes_RiccontrolRequestIes5) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolRequestIes_RiccontrolRequestIes5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 5 {
		err := RiccontrolRequestIes_RiccontrolRequestIes5ValidationError{
			field:  "Id",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolRequestIes_RiccontrolRequestIes5ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolRequestIes_RiccontrolRequestIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolRequestIes_RiccontrolRequestIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes5ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RiccontrolRequestIes_RiccontrolRequestIes5ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolRequestIes_RiccontrolRequestIes5MultiError(errors)
	}
	return nil
}

// RiccontrolRequestIes_RiccontrolRequestIes5MultiError is an error wrapping
// multiple validation errors returned by
// RiccontrolRequestIes_RiccontrolRequestIes5.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolRequestIes_RiccontrolRequestIes5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolRequestIes_RiccontrolRequestIes5MultiError) AllErrors() []error { return m }

// RiccontrolRequestIes_RiccontrolRequestIes5ValidationError is the validation
// error returned by RiccontrolRequestIes_RiccontrolRequestIes5.Validate if
// the designated constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIes_RiccontrolRequestIes5ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIes_RiccontrolRequestIes5ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIes_RiccontrolRequestIes5ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIes_RiccontrolRequestIes5ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIes_RiccontrolRequestIes5ValidationError) ErrorName() string {
	return "RiccontrolRequestIes_RiccontrolRequestIes5ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIes_RiccontrolRequestIes5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes_RiccontrolRequestIes5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIes_RiccontrolRequestIes5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIes_RiccontrolRequestIes5ValidationError{}

// Validate checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes20 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RiccontrolRequestIes_RiccontrolRequestIes20) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes20 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RiccontrolRequestIes_RiccontrolRequestIes20MultiError, or nil if none found.
func (m *RiccontrolRequestIes_RiccontrolRequestIes20) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolRequestIes_RiccontrolRequestIes20) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 20 {
		err := RiccontrolRequestIes_RiccontrolRequestIes20ValidationError{
			field:  "Id",
			reason: "value must equal 20",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolRequestIes_RiccontrolRequestIes20ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolRequestIes_RiccontrolRequestIes20ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolRequestIes_RiccontrolRequestIes20ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes20ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RiccontrolRequestIes_RiccontrolRequestIes20ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolRequestIes_RiccontrolRequestIes20MultiError(errors)
	}
	return nil
}

// RiccontrolRequestIes_RiccontrolRequestIes20MultiError is an error wrapping
// multiple validation errors returned by
// RiccontrolRequestIes_RiccontrolRequestIes20.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes20MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolRequestIes_RiccontrolRequestIes20MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolRequestIes_RiccontrolRequestIes20MultiError) AllErrors() []error { return m }

// RiccontrolRequestIes_RiccontrolRequestIes20ValidationError is the validation
// error returned by RiccontrolRequestIes_RiccontrolRequestIes20.Validate if
// the designated constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes20ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIes_RiccontrolRequestIes20ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIes_RiccontrolRequestIes20ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIes_RiccontrolRequestIes20ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIes_RiccontrolRequestIes20ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIes_RiccontrolRequestIes20ValidationError) ErrorName() string {
	return "RiccontrolRequestIes_RiccontrolRequestIes20ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIes_RiccontrolRequestIes20ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes_RiccontrolRequestIes20.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIes_RiccontrolRequestIes20ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIes_RiccontrolRequestIes20ValidationError{}

// Validate checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes22 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RiccontrolRequestIes_RiccontrolRequestIes22) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes22 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RiccontrolRequestIes_RiccontrolRequestIes22MultiError, or nil if none found.
func (m *RiccontrolRequestIes_RiccontrolRequestIes22) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolRequestIes_RiccontrolRequestIes22) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 22 {
		err := RiccontrolRequestIes_RiccontrolRequestIes22ValidationError{
			field:  "Id",
			reason: "value must equal 22",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolRequestIes_RiccontrolRequestIes22ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolRequestIes_RiccontrolRequestIes22ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolRequestIes_RiccontrolRequestIes22ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes22ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RiccontrolRequestIes_RiccontrolRequestIes22ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolRequestIes_RiccontrolRequestIes22MultiError(errors)
	}
	return nil
}

// RiccontrolRequestIes_RiccontrolRequestIes22MultiError is an error wrapping
// multiple validation errors returned by
// RiccontrolRequestIes_RiccontrolRequestIes22.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes22MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolRequestIes_RiccontrolRequestIes22MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolRequestIes_RiccontrolRequestIes22MultiError) AllErrors() []error { return m }

// RiccontrolRequestIes_RiccontrolRequestIes22ValidationError is the validation
// error returned by RiccontrolRequestIes_RiccontrolRequestIes22.Validate if
// the designated constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes22ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIes_RiccontrolRequestIes22ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIes_RiccontrolRequestIes22ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIes_RiccontrolRequestIes22ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIes_RiccontrolRequestIes22ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIes_RiccontrolRequestIes22ValidationError) ErrorName() string {
	return "RiccontrolRequestIes_RiccontrolRequestIes22ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIes_RiccontrolRequestIes22ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes_RiccontrolRequestIes22.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIes_RiccontrolRequestIes22ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIes_RiccontrolRequestIes22ValidationError{}

// Validate checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes23 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RiccontrolRequestIes_RiccontrolRequestIes23) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes23 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RiccontrolRequestIes_RiccontrolRequestIes23MultiError, or nil if none found.
func (m *RiccontrolRequestIes_RiccontrolRequestIes23) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolRequestIes_RiccontrolRequestIes23) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 23 {
		err := RiccontrolRequestIes_RiccontrolRequestIes23ValidationError{
			field:  "Id",
			reason: "value must equal 23",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolRequestIes_RiccontrolRequestIes23ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolRequestIes_RiccontrolRequestIes23ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolRequestIes_RiccontrolRequestIes23ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes23ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RiccontrolRequestIes_RiccontrolRequestIes23ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolRequestIes_RiccontrolRequestIes23MultiError(errors)
	}
	return nil
}

// RiccontrolRequestIes_RiccontrolRequestIes23MultiError is an error wrapping
// multiple validation errors returned by
// RiccontrolRequestIes_RiccontrolRequestIes23.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes23MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolRequestIes_RiccontrolRequestIes23MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolRequestIes_RiccontrolRequestIes23MultiError) AllErrors() []error { return m }

// RiccontrolRequestIes_RiccontrolRequestIes23ValidationError is the validation
// error returned by RiccontrolRequestIes_RiccontrolRequestIes23.Validate if
// the designated constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes23ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIes_RiccontrolRequestIes23ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIes_RiccontrolRequestIes23ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIes_RiccontrolRequestIes23ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIes_RiccontrolRequestIes23ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIes_RiccontrolRequestIes23ValidationError) ErrorName() string {
	return "RiccontrolRequestIes_RiccontrolRequestIes23ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIes_RiccontrolRequestIes23ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes_RiccontrolRequestIes23.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIes_RiccontrolRequestIes23ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIes_RiccontrolRequestIes23ValidationError{}

// Validate checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes21 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RiccontrolRequestIes_RiccontrolRequestIes21) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes21 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RiccontrolRequestIes_RiccontrolRequestIes21MultiError, or nil if none found.
func (m *RiccontrolRequestIes_RiccontrolRequestIes21) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolRequestIes_RiccontrolRequestIes21) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 21 {
		err := RiccontrolRequestIes_RiccontrolRequestIes21ValidationError{
			field:  "Id",
			reason: "value must equal 21",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolRequestIes_RiccontrolRequestIes21ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if m.GetPresence() != 0 {
		err := RiccontrolRequestIes_RiccontrolRequestIes21ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolRequestIes_RiccontrolRequestIes21MultiError(errors)
	}
	return nil
}

// RiccontrolRequestIes_RiccontrolRequestIes21MultiError is an error wrapping
// multiple validation errors returned by
// RiccontrolRequestIes_RiccontrolRequestIes21.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes21MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolRequestIes_RiccontrolRequestIes21MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolRequestIes_RiccontrolRequestIes21MultiError) AllErrors() []error { return m }

// RiccontrolRequestIes_RiccontrolRequestIes21ValidationError is the validation
// error returned by RiccontrolRequestIes_RiccontrolRequestIes21.Validate if
// the designated constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes21ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIes_RiccontrolRequestIes21ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIes_RiccontrolRequestIes21ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIes_RiccontrolRequestIes21ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIes_RiccontrolRequestIes21ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIes_RiccontrolRequestIes21ValidationError) ErrorName() string {
	return "RiccontrolRequestIes_RiccontrolRequestIes21ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIes_RiccontrolRequestIes21ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes_RiccontrolRequestIes21.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIes_RiccontrolRequestIes21ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIes_RiccontrolRequestIes21ValidationError{}

// Validate checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29MultiError, or nil if
// none found.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 29 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError{
			field:  "Id",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29MultiError(errors)
	}
	return nil
}

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29MultiError is an error
// wrapping multiple validation errors returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29.ValidateAll() if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29MultiError) AllErrors() []error { return m }

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError is the
// validation error returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29.Validate if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes29ValidationError{}

// Validate checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5MultiError, or nil if
// none found.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 5 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError{
			field:  "Id",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5MultiError(errors)
	}
	return nil
}

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5MultiError is an error
// wrapping multiple validation errors returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5.ValidateAll() if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5MultiError) AllErrors() []error { return m }

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError is the
// validation error returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5.Validate if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes5ValidationError{}

// Validate checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20MultiError, or nil if
// none found.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 20 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError{
			field:  "Id",
			reason: "value must equal 20",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20MultiError(errors)
	}
	return nil
}

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20MultiError is an error
// wrapping multiple validation errors returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20.ValidateAll() if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20MultiError) AllErrors() []error { return m }

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError is the
// validation error returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20.Validate if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes20ValidationError{}

// Validate checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24MultiError, or nil if
// none found.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 24 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError{
			field:  "Id",
			reason: "value must equal 24",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if m.GetPresence() != 2 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24MultiError(errors)
	}
	return nil
}

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24MultiError is an error
// wrapping multiple validation errors returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24.ValidateAll() if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24MultiError) AllErrors() []error { return m }

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError is the
// validation error returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24.Validate if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes24ValidationError{}

// Validate checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32MultiError, or nil if
// none found.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 32 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError{
			field:  "Id",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32MultiError(errors)
	}
	return nil
}

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32MultiError is an error
// wrapping multiple validation errors returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32.ValidateAll() if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32MultiError) AllErrors() []error { return m }

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError is the
// validation error returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32.Validate if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes32ValidationError{}

// Validate checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes29 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RiccontrolFailureIes_RiccontrolFailureIes29) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes29 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RiccontrolFailureIes_RiccontrolFailureIes29MultiError, or nil if none found.
func (m *RiccontrolFailureIes_RiccontrolFailureIes29) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolFailureIes_RiccontrolFailureIes29) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 29 {
		err := RiccontrolFailureIes_RiccontrolFailureIes29ValidationError{
			field:  "Id",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolFailureIes_RiccontrolFailureIes29ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolFailureIes_RiccontrolFailureIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolFailureIes_RiccontrolFailureIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes29ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RiccontrolFailureIes_RiccontrolFailureIes29ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolFailureIes_RiccontrolFailureIes29MultiError(errors)
	}
	return nil
}

// RiccontrolFailureIes_RiccontrolFailureIes29MultiError is an error wrapping
// multiple validation errors returned by
// RiccontrolFailureIes_RiccontrolFailureIes29.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes29MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolFailureIes_RiccontrolFailureIes29MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolFailureIes_RiccontrolFailureIes29MultiError) AllErrors() []error { return m }

// RiccontrolFailureIes_RiccontrolFailureIes29ValidationError is the validation
// error returned by RiccontrolFailureIes_RiccontrolFailureIes29.Validate if
// the designated constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes29ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureIes_RiccontrolFailureIes29ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureIes_RiccontrolFailureIes29ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureIes_RiccontrolFailureIes29ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureIes_RiccontrolFailureIes29ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureIes_RiccontrolFailureIes29ValidationError) ErrorName() string {
	return "RiccontrolFailureIes_RiccontrolFailureIes29ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureIes_RiccontrolFailureIes29ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailureIes_RiccontrolFailureIes29.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureIes_RiccontrolFailureIes29ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureIes_RiccontrolFailureIes29ValidationError{}

// Validate checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes5 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RiccontrolFailureIes_RiccontrolFailureIes5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes5 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RiccontrolFailureIes_RiccontrolFailureIes5MultiError, or nil if none found.
func (m *RiccontrolFailureIes_RiccontrolFailureIes5) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolFailureIes_RiccontrolFailureIes5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 5 {
		err := RiccontrolFailureIes_RiccontrolFailureIes5ValidationError{
			field:  "Id",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolFailureIes_RiccontrolFailureIes5ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolFailureIes_RiccontrolFailureIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolFailureIes_RiccontrolFailureIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes5ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RiccontrolFailureIes_RiccontrolFailureIes5ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolFailureIes_RiccontrolFailureIes5MultiError(errors)
	}
	return nil
}

// RiccontrolFailureIes_RiccontrolFailureIes5MultiError is an error wrapping
// multiple validation errors returned by
// RiccontrolFailureIes_RiccontrolFailureIes5.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolFailureIes_RiccontrolFailureIes5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolFailureIes_RiccontrolFailureIes5MultiError) AllErrors() []error { return m }

// RiccontrolFailureIes_RiccontrolFailureIes5ValidationError is the validation
// error returned by RiccontrolFailureIes_RiccontrolFailureIes5.Validate if
// the designated constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureIes_RiccontrolFailureIes5ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureIes_RiccontrolFailureIes5ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureIes_RiccontrolFailureIes5ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureIes_RiccontrolFailureIes5ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureIes_RiccontrolFailureIes5ValidationError) ErrorName() string {
	return "RiccontrolFailureIes_RiccontrolFailureIes5ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureIes_RiccontrolFailureIes5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailureIes_RiccontrolFailureIes5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureIes_RiccontrolFailureIes5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureIes_RiccontrolFailureIes5ValidationError{}

// Validate checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes20 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RiccontrolFailureIes_RiccontrolFailureIes20) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes20 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RiccontrolFailureIes_RiccontrolFailureIes20MultiError, or nil if none found.
func (m *RiccontrolFailureIes_RiccontrolFailureIes20) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolFailureIes_RiccontrolFailureIes20) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 20 {
		err := RiccontrolFailureIes_RiccontrolFailureIes20ValidationError{
			field:  "Id",
			reason: "value must equal 20",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolFailureIes_RiccontrolFailureIes20ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolFailureIes_RiccontrolFailureIes20ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolFailureIes_RiccontrolFailureIes20ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes20ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RiccontrolFailureIes_RiccontrolFailureIes20ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolFailureIes_RiccontrolFailureIes20MultiError(errors)
	}
	return nil
}

// RiccontrolFailureIes_RiccontrolFailureIes20MultiError is an error wrapping
// multiple validation errors returned by
// RiccontrolFailureIes_RiccontrolFailureIes20.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes20MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolFailureIes_RiccontrolFailureIes20MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolFailureIes_RiccontrolFailureIes20MultiError) AllErrors() []error { return m }

// RiccontrolFailureIes_RiccontrolFailureIes20ValidationError is the validation
// error returned by RiccontrolFailureIes_RiccontrolFailureIes20.Validate if
// the designated constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes20ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureIes_RiccontrolFailureIes20ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureIes_RiccontrolFailureIes20ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureIes_RiccontrolFailureIes20ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureIes_RiccontrolFailureIes20ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureIes_RiccontrolFailureIes20ValidationError) ErrorName() string {
	return "RiccontrolFailureIes_RiccontrolFailureIes20ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureIes_RiccontrolFailureIes20ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailureIes_RiccontrolFailureIes20.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureIes_RiccontrolFailureIes20ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureIes_RiccontrolFailureIes20ValidationError{}

// Validate checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RiccontrolFailureIes_RiccontrolFailureIes1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes1 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RiccontrolFailureIes_RiccontrolFailureIes1MultiError, or nil if none found.
func (m *RiccontrolFailureIes_RiccontrolFailureIes1) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolFailureIes_RiccontrolFailureIes1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 1 {
		err := RiccontrolFailureIes_RiccontrolFailureIes1ValidationError{
			field:  "Id",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := RiccontrolFailureIes_RiccontrolFailureIes1ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolFailureIes_RiccontrolFailureIes1ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolFailureIes_RiccontrolFailureIes1ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes1ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RiccontrolFailureIes_RiccontrolFailureIes1ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolFailureIes_RiccontrolFailureIes1MultiError(errors)
	}
	return nil
}

// RiccontrolFailureIes_RiccontrolFailureIes1MultiError is an error wrapping
// multiple validation errors returned by
// RiccontrolFailureIes_RiccontrolFailureIes1.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolFailureIes_RiccontrolFailureIes1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolFailureIes_RiccontrolFailureIes1MultiError) AllErrors() []error { return m }

// RiccontrolFailureIes_RiccontrolFailureIes1ValidationError is the validation
// error returned by RiccontrolFailureIes_RiccontrolFailureIes1.Validate if
// the designated constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureIes_RiccontrolFailureIes1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureIes_RiccontrolFailureIes1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureIes_RiccontrolFailureIes1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureIes_RiccontrolFailureIes1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureIes_RiccontrolFailureIes1ValidationError) ErrorName() string {
	return "RiccontrolFailureIes_RiccontrolFailureIes1ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureIes_RiccontrolFailureIes1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailureIes_RiccontrolFailureIes1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureIes_RiccontrolFailureIes1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureIes_RiccontrolFailureIes1ValidationError{}

// Validate checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes32 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RiccontrolFailureIes_RiccontrolFailureIes32) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes32 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RiccontrolFailureIes_RiccontrolFailureIes32MultiError, or nil if none found.
func (m *RiccontrolFailureIes_RiccontrolFailureIes32) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolFailureIes_RiccontrolFailureIes32) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 32 {
		err := RiccontrolFailureIes_RiccontrolFailureIes32ValidationError{
			field:  "Id",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RiccontrolFailureIes_RiccontrolFailureIes32ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RiccontrolFailureIes_RiccontrolFailureIes32ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RiccontrolFailureIes_RiccontrolFailureIes32ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes32ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RiccontrolFailureIes_RiccontrolFailureIes32ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RiccontrolFailureIes_RiccontrolFailureIes32MultiError(errors)
	}
	return nil
}

// RiccontrolFailureIes_RiccontrolFailureIes32MultiError is an error wrapping
// multiple validation errors returned by
// RiccontrolFailureIes_RiccontrolFailureIes32.ValidateAll() if the designated
// constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes32MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolFailureIes_RiccontrolFailureIes32MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolFailureIes_RiccontrolFailureIes32MultiError) AllErrors() []error { return m }

// RiccontrolFailureIes_RiccontrolFailureIes32ValidationError is the validation
// error returned by RiccontrolFailureIes_RiccontrolFailureIes32.Validate if
// the designated constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes32ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureIes_RiccontrolFailureIes32ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureIes_RiccontrolFailureIes32ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureIes_RiccontrolFailureIes32ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureIes_RiccontrolFailureIes32ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureIes_RiccontrolFailureIes32ValidationError) ErrorName() string {
	return "RiccontrolFailureIes_RiccontrolFailureIes32ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureIes_RiccontrolFailureIes32ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailureIes_RiccontrolFailureIes32.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureIes_RiccontrolFailureIes32ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureIes_RiccontrolFailureIes32ValidationError{}

// Validate checks the field values on ErrorIndicationIes_ErrorIndicationIes29
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ErrorIndicationIes_ErrorIndicationIes29) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ErrorIndicationIes_ErrorIndicationIes29 with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ErrorIndicationIes_ErrorIndicationIes29MultiError, or nil if none found.
func (m *ErrorIndicationIes_ErrorIndicationIes29) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorIndicationIes_ErrorIndicationIes29) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 29 {
		err := ErrorIndicationIes_ErrorIndicationIes29ValidationError{
			field:  "Id",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := ErrorIndicationIes_ErrorIndicationIes29ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorIndicationIes_ErrorIndicationIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorIndicationIes_ErrorIndicationIes29ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes29ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := ErrorIndicationIes_ErrorIndicationIes29ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ErrorIndicationIes_ErrorIndicationIes29MultiError(errors)
	}
	return nil
}

// ErrorIndicationIes_ErrorIndicationIes29MultiError is an error wrapping
// multiple validation errors returned by
// ErrorIndicationIes_ErrorIndicationIes29.ValidateAll() if the designated
// constraints aren't met.
type ErrorIndicationIes_ErrorIndicationIes29MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorIndicationIes_ErrorIndicationIes29MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorIndicationIes_ErrorIndicationIes29MultiError) AllErrors() []error { return m }

// ErrorIndicationIes_ErrorIndicationIes29ValidationError is the validation
// error returned by ErrorIndicationIes_ErrorIndicationIes29.Validate if the
// designated constraints aren't met.
type ErrorIndicationIes_ErrorIndicationIes29ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorIndicationIes_ErrorIndicationIes29ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorIndicationIes_ErrorIndicationIes29ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorIndicationIes_ErrorIndicationIes29ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorIndicationIes_ErrorIndicationIes29ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorIndicationIes_ErrorIndicationIes29ValidationError) ErrorName() string {
	return "ErrorIndicationIes_ErrorIndicationIes29ValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorIndicationIes_ErrorIndicationIes29ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorIndicationIes_ErrorIndicationIes29.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorIndicationIes_ErrorIndicationIes29ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorIndicationIes_ErrorIndicationIes29ValidationError{}

// Validate checks the field values on ErrorIndicationIes_ErrorIndicationIes5
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ErrorIndicationIes_ErrorIndicationIes5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ErrorIndicationIes_ErrorIndicationIes5 with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ErrorIndicationIes_ErrorIndicationIes5MultiError, or nil if none found.
func (m *ErrorIndicationIes_ErrorIndicationIes5) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorIndicationIes_ErrorIndicationIes5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 5 {
		err := ErrorIndicationIes_ErrorIndicationIes5ValidationError{
			field:  "Id",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := ErrorIndicationIes_ErrorIndicationIes5ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorIndicationIes_ErrorIndicationIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorIndicationIes_ErrorIndicationIes5ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes5ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := ErrorIndicationIes_ErrorIndicationIes5ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ErrorIndicationIes_ErrorIndicationIes5MultiError(errors)
	}
	return nil
}

// ErrorIndicationIes_ErrorIndicationIes5MultiError is an error wrapping
// multiple validation errors returned by
// ErrorIndicationIes_ErrorIndicationIes5.ValidateAll() if the designated
// constraints aren't met.
type ErrorIndicationIes_ErrorIndicationIes5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorIndicationIes_ErrorIndicationIes5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorIndicationIes_ErrorIndicationIes5MultiError) AllErrors() []error { return m }

// ErrorIndicationIes_ErrorIndicationIes5ValidationError is the validation
// error returned by ErrorIndicationIes_ErrorIndicationIes5.Validate if the
// designated constraints aren't met.
type ErrorIndicationIes_ErrorIndicationIes5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorIndicationIes_ErrorIndicationIes5ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorIndicationIes_ErrorIndicationIes5ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorIndicationIes_ErrorIndicationIes5ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorIndicationIes_ErrorIndicationIes5ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorIndicationIes_ErrorIndicationIes5ValidationError) ErrorName() string {
	return "ErrorIndicationIes_ErrorIndicationIes5ValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorIndicationIes_ErrorIndicationIes5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorIndicationIes_ErrorIndicationIes5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorIndicationIes_ErrorIndicationIes5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorIndicationIes_ErrorIndicationIes5ValidationError{}

// Validate checks the field values on ErrorIndicationIes_ErrorIndicationIes1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ErrorIndicationIes_ErrorIndicationIes1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ErrorIndicationIes_ErrorIndicationIes1 with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ErrorIndicationIes_ErrorIndicationIes1MultiError, or nil if none found.
func (m *ErrorIndicationIes_ErrorIndicationIes1) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorIndicationIes_ErrorIndicationIes1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 1 {
		err := ErrorIndicationIes_ErrorIndicationIes1ValidationError{
			field:  "Id",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := ErrorIndicationIes_ErrorIndicationIes1ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorIndicationIes_ErrorIndicationIes1ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorIndicationIes_ErrorIndicationIes1ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes1ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := ErrorIndicationIes_ErrorIndicationIes1ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ErrorIndicationIes_ErrorIndicationIes1MultiError(errors)
	}
	return nil
}

// ErrorIndicationIes_ErrorIndicationIes1MultiError is an error wrapping
// multiple validation errors returned by
// ErrorIndicationIes_ErrorIndicationIes1.ValidateAll() if the designated
// constraints aren't met.
type ErrorIndicationIes_ErrorIndicationIes1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorIndicationIes_ErrorIndicationIes1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorIndicationIes_ErrorIndicationIes1MultiError) AllErrors() []error { return m }

// ErrorIndicationIes_ErrorIndicationIes1ValidationError is the validation
// error returned by ErrorIndicationIes_ErrorIndicationIes1.Validate if the
// designated constraints aren't met.
type ErrorIndicationIes_ErrorIndicationIes1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorIndicationIes_ErrorIndicationIes1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorIndicationIes_ErrorIndicationIes1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorIndicationIes_ErrorIndicationIes1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorIndicationIes_ErrorIndicationIes1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorIndicationIes_ErrorIndicationIes1ValidationError) ErrorName() string {
	return "ErrorIndicationIes_ErrorIndicationIes1ValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorIndicationIes_ErrorIndicationIes1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorIndicationIes_ErrorIndicationIes1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorIndicationIes_ErrorIndicationIes1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorIndicationIes_ErrorIndicationIes1ValidationError{}

// Validate checks the field values on ErrorIndicationIes_ErrorIndicationIes2
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ErrorIndicationIes_ErrorIndicationIes2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ErrorIndicationIes_ErrorIndicationIes2 with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ErrorIndicationIes_ErrorIndicationIes2MultiError, or nil if none found.
func (m *ErrorIndicationIes_ErrorIndicationIes2) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorIndicationIes_ErrorIndicationIes2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 2 {
		err := ErrorIndicationIes_ErrorIndicationIes2ValidationError{
			field:  "Id",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := ErrorIndicationIes_ErrorIndicationIes2ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorIndicationIes_ErrorIndicationIes2ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorIndicationIes_ErrorIndicationIes2ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes2ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := ErrorIndicationIes_ErrorIndicationIes2ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ErrorIndicationIes_ErrorIndicationIes2MultiError(errors)
	}
	return nil
}

// ErrorIndicationIes_ErrorIndicationIes2MultiError is an error wrapping
// multiple validation errors returned by
// ErrorIndicationIes_ErrorIndicationIes2.ValidateAll() if the designated
// constraints aren't met.
type ErrorIndicationIes_ErrorIndicationIes2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorIndicationIes_ErrorIndicationIes2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorIndicationIes_ErrorIndicationIes2MultiError) AllErrors() []error { return m }

// ErrorIndicationIes_ErrorIndicationIes2ValidationError is the validation
// error returned by ErrorIndicationIes_ErrorIndicationIes2.Validate if the
// designated constraints aren't met.
type ErrorIndicationIes_ErrorIndicationIes2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorIndicationIes_ErrorIndicationIes2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorIndicationIes_ErrorIndicationIes2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorIndicationIes_ErrorIndicationIes2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorIndicationIes_ErrorIndicationIes2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorIndicationIes_ErrorIndicationIes2ValidationError) ErrorName() string {
	return "ErrorIndicationIes_ErrorIndicationIes2ValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorIndicationIes_ErrorIndicationIes2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorIndicationIes_ErrorIndicationIes2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorIndicationIes_ErrorIndicationIes2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorIndicationIes_ErrorIndicationIes2ValidationError{}

// Validate checks the field values on E2SetupRequestIes_E2SetupRequestIes3
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SetupRequestIes_E2SetupRequestIes3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SetupRequestIes_E2SetupRequestIes3
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SetupRequestIes_E2SetupRequestIes3MultiError, or nil if none found.
func (m *E2SetupRequestIes_E2SetupRequestIes3) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupRequestIes_E2SetupRequestIes3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 3 {
		err := E2SetupRequestIes_E2SetupRequestIes3ValidationError{
			field:  "Id",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := E2SetupRequestIes_E2SetupRequestIes3ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupRequestIes_E2SetupRequestIes3ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupRequestIes_E2SetupRequestIes3ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestIes_E2SetupRequestIes3ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := E2SetupRequestIes_E2SetupRequestIes3ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return E2SetupRequestIes_E2SetupRequestIes3MultiError(errors)
	}
	return nil
}

// E2SetupRequestIes_E2SetupRequestIes3MultiError is an error wrapping multiple
// validation errors returned by
// E2SetupRequestIes_E2SetupRequestIes3.ValidateAll() if the designated
// constraints aren't met.
type E2SetupRequestIes_E2SetupRequestIes3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupRequestIes_E2SetupRequestIes3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupRequestIes_E2SetupRequestIes3MultiError) AllErrors() []error { return m }

// E2SetupRequestIes_E2SetupRequestIes3ValidationError is the validation error
// returned by E2SetupRequestIes_E2SetupRequestIes3.Validate if the designated
// constraints aren't met.
type E2SetupRequestIes_E2SetupRequestIes3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupRequestIes_E2SetupRequestIes3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupRequestIes_E2SetupRequestIes3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupRequestIes_E2SetupRequestIes3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupRequestIes_E2SetupRequestIes3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupRequestIes_E2SetupRequestIes3ValidationError) ErrorName() string {
	return "E2SetupRequestIes_E2SetupRequestIes3ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupRequestIes_E2SetupRequestIes3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupRequestIes_E2SetupRequestIes3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupRequestIes_E2SetupRequestIes3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupRequestIes_E2SetupRequestIes3ValidationError{}

// Validate checks the field values on E2SetupRequestIes_E2SetupRequestIes10
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SetupRequestIes_E2SetupRequestIes10) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SetupRequestIes_E2SetupRequestIes10
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SetupRequestIes_E2SetupRequestIes10MultiError, or nil if none found.
func (m *E2SetupRequestIes_E2SetupRequestIes10) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupRequestIes_E2SetupRequestIes10) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 10 {
		err := E2SetupRequestIes_E2SetupRequestIes10ValidationError{
			field:  "Id",
			reason: "value must equal 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := E2SetupRequestIes_E2SetupRequestIes10ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupRequestIes_E2SetupRequestIes10ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupRequestIes_E2SetupRequestIes10ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestIes_E2SetupRequestIes10ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := E2SetupRequestIes_E2SetupRequestIes10ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return E2SetupRequestIes_E2SetupRequestIes10MultiError(errors)
	}
	return nil
}

// E2SetupRequestIes_E2SetupRequestIes10MultiError is an error wrapping
// multiple validation errors returned by
// E2SetupRequestIes_E2SetupRequestIes10.ValidateAll() if the designated
// constraints aren't met.
type E2SetupRequestIes_E2SetupRequestIes10MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupRequestIes_E2SetupRequestIes10MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupRequestIes_E2SetupRequestIes10MultiError) AllErrors() []error { return m }

// E2SetupRequestIes_E2SetupRequestIes10ValidationError is the validation error
// returned by E2SetupRequestIes_E2SetupRequestIes10.Validate if the
// designated constraints aren't met.
type E2SetupRequestIes_E2SetupRequestIes10ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupRequestIes_E2SetupRequestIes10ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupRequestIes_E2SetupRequestIes10ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupRequestIes_E2SetupRequestIes10ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupRequestIes_E2SetupRequestIes10ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupRequestIes_E2SetupRequestIes10ValidationError) ErrorName() string {
	return "E2SetupRequestIes_E2SetupRequestIes10ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupRequestIes_E2SetupRequestIes10ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupRequestIes_E2SetupRequestIes10.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupRequestIes_E2SetupRequestIes10ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupRequestIes_E2SetupRequestIes10ValidationError{}

// Validate checks the field values on E2SetupResponseIes_E2SetupResponseIes4
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SetupResponseIes_E2SetupResponseIes4) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// E2SetupResponseIes_E2SetupResponseIes4 with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// E2SetupResponseIes_E2SetupResponseIes4MultiError, or nil if none found.
func (m *E2SetupResponseIes_E2SetupResponseIes4) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupResponseIes_E2SetupResponseIes4) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 4 {
		err := E2SetupResponseIes_E2SetupResponseIes4ValidationError{
			field:  "Id",
			reason: "value must equal 4",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := E2SetupResponseIes_E2SetupResponseIes4ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupResponseIes_E2SetupResponseIes4ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupResponseIes_E2SetupResponseIes4ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes4ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := E2SetupResponseIes_E2SetupResponseIes4ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return E2SetupResponseIes_E2SetupResponseIes4MultiError(errors)
	}
	return nil
}

// E2SetupResponseIes_E2SetupResponseIes4MultiError is an error wrapping
// multiple validation errors returned by
// E2SetupResponseIes_E2SetupResponseIes4.ValidateAll() if the designated
// constraints aren't met.
type E2SetupResponseIes_E2SetupResponseIes4MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupResponseIes_E2SetupResponseIes4MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupResponseIes_E2SetupResponseIes4MultiError) AllErrors() []error { return m }

// E2SetupResponseIes_E2SetupResponseIes4ValidationError is the validation
// error returned by E2SetupResponseIes_E2SetupResponseIes4.Validate if the
// designated constraints aren't met.
type E2SetupResponseIes_E2SetupResponseIes4ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupResponseIes_E2SetupResponseIes4ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupResponseIes_E2SetupResponseIes4ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupResponseIes_E2SetupResponseIes4ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupResponseIes_E2SetupResponseIes4ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupResponseIes_E2SetupResponseIes4ValidationError) ErrorName() string {
	return "E2SetupResponseIes_E2SetupResponseIes4ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupResponseIes_E2SetupResponseIes4ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupResponseIes_E2SetupResponseIes4.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupResponseIes_E2SetupResponseIes4ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupResponseIes_E2SetupResponseIes4ValidationError{}

// Validate checks the field values on E2SetupResponseIes_E2SetupResponseIes9
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SetupResponseIes_E2SetupResponseIes9) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// E2SetupResponseIes_E2SetupResponseIes9 with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// E2SetupResponseIes_E2SetupResponseIes9MultiError, or nil if none found.
func (m *E2SetupResponseIes_E2SetupResponseIes9) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupResponseIes_E2SetupResponseIes9) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 9 {
		err := E2SetupResponseIes_E2SetupResponseIes9ValidationError{
			field:  "Id",
			reason: "value must equal 9",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := E2SetupResponseIes_E2SetupResponseIes9ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupResponseIes_E2SetupResponseIes9ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupResponseIes_E2SetupResponseIes9ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes9ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := E2SetupResponseIes_E2SetupResponseIes9ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return E2SetupResponseIes_E2SetupResponseIes9MultiError(errors)
	}
	return nil
}

// E2SetupResponseIes_E2SetupResponseIes9MultiError is an error wrapping
// multiple validation errors returned by
// E2SetupResponseIes_E2SetupResponseIes9.ValidateAll() if the designated
// constraints aren't met.
type E2SetupResponseIes_E2SetupResponseIes9MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupResponseIes_E2SetupResponseIes9MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupResponseIes_E2SetupResponseIes9MultiError) AllErrors() []error { return m }

// E2SetupResponseIes_E2SetupResponseIes9ValidationError is the validation
// error returned by E2SetupResponseIes_E2SetupResponseIes9.Validate if the
// designated constraints aren't met.
type E2SetupResponseIes_E2SetupResponseIes9ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupResponseIes_E2SetupResponseIes9ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupResponseIes_E2SetupResponseIes9ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupResponseIes_E2SetupResponseIes9ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupResponseIes_E2SetupResponseIes9ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupResponseIes_E2SetupResponseIes9ValidationError) ErrorName() string {
	return "E2SetupResponseIes_E2SetupResponseIes9ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupResponseIes_E2SetupResponseIes9ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupResponseIes_E2SetupResponseIes9.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupResponseIes_E2SetupResponseIes9ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupResponseIes_E2SetupResponseIes9ValidationError{}

// Validate checks the field values on E2SetupResponseIes_E2SetupResponseIes13
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SetupResponseIes_E2SetupResponseIes13) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// E2SetupResponseIes_E2SetupResponseIes13 with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// E2SetupResponseIes_E2SetupResponseIes13MultiError, or nil if none found.
func (m *E2SetupResponseIes_E2SetupResponseIes13) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupResponseIes_E2SetupResponseIes13) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 13 {
		err := E2SetupResponseIes_E2SetupResponseIes13ValidationError{
			field:  "Id",
			reason: "value must equal 13",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := E2SetupResponseIes_E2SetupResponseIes13ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupResponseIes_E2SetupResponseIes13ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupResponseIes_E2SetupResponseIes13ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes13ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := E2SetupResponseIes_E2SetupResponseIes13ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return E2SetupResponseIes_E2SetupResponseIes13MultiError(errors)
	}
	return nil
}

// E2SetupResponseIes_E2SetupResponseIes13MultiError is an error wrapping
// multiple validation errors returned by
// E2SetupResponseIes_E2SetupResponseIes13.ValidateAll() if the designated
// constraints aren't met.
type E2SetupResponseIes_E2SetupResponseIes13MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupResponseIes_E2SetupResponseIes13MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupResponseIes_E2SetupResponseIes13MultiError) AllErrors() []error { return m }

// E2SetupResponseIes_E2SetupResponseIes13ValidationError is the validation
// error returned by E2SetupResponseIes_E2SetupResponseIes13.Validate if the
// designated constraints aren't met.
type E2SetupResponseIes_E2SetupResponseIes13ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupResponseIes_E2SetupResponseIes13ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupResponseIes_E2SetupResponseIes13ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupResponseIes_E2SetupResponseIes13ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupResponseIes_E2SetupResponseIes13ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupResponseIes_E2SetupResponseIes13ValidationError) ErrorName() string {
	return "E2SetupResponseIes_E2SetupResponseIes13ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupResponseIes_E2SetupResponseIes13ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupResponseIes_E2SetupResponseIes13.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupResponseIes_E2SetupResponseIes13ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupResponseIes_E2SetupResponseIes13ValidationError{}

// Validate checks the field values on E2SetupFailureIes_E2SetupFailureIes1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SetupFailureIes_E2SetupFailureIes1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SetupFailureIes_E2SetupFailureIes1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SetupFailureIes_E2SetupFailureIes1MultiError, or nil if none found.
func (m *E2SetupFailureIes_E2SetupFailureIes1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupFailureIes_E2SetupFailureIes1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 1 {
		err := E2SetupFailureIes_E2SetupFailureIes1ValidationError{
			field:  "Id",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := E2SetupFailureIes_E2SetupFailureIes1ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupFailureIes_E2SetupFailureIes1ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupFailureIes_E2SetupFailureIes1ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIes_E2SetupFailureIes1ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := E2SetupFailureIes_E2SetupFailureIes1ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return E2SetupFailureIes_E2SetupFailureIes1MultiError(errors)
	}
	return nil
}

// E2SetupFailureIes_E2SetupFailureIes1MultiError is an error wrapping multiple
// validation errors returned by
// E2SetupFailureIes_E2SetupFailureIes1.ValidateAll() if the designated
// constraints aren't met.
type E2SetupFailureIes_E2SetupFailureIes1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupFailureIes_E2SetupFailureIes1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupFailureIes_E2SetupFailureIes1MultiError) AllErrors() []error { return m }

// E2SetupFailureIes_E2SetupFailureIes1ValidationError is the validation error
// returned by E2SetupFailureIes_E2SetupFailureIes1.Validate if the designated
// constraints aren't met.
type E2SetupFailureIes_E2SetupFailureIes1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupFailureIes_E2SetupFailureIes1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupFailureIes_E2SetupFailureIes1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupFailureIes_E2SetupFailureIes1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupFailureIes_E2SetupFailureIes1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupFailureIes_E2SetupFailureIes1ValidationError) ErrorName() string {
	return "E2SetupFailureIes_E2SetupFailureIes1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupFailureIes_E2SetupFailureIes1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupFailureIes_E2SetupFailureIes1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupFailureIes_E2SetupFailureIes1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupFailureIes_E2SetupFailureIes1ValidationError{}

// Validate checks the field values on E2SetupFailureIes_E2SetupFailureIes31
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SetupFailureIes_E2SetupFailureIes31) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SetupFailureIes_E2SetupFailureIes31
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SetupFailureIes_E2SetupFailureIes31MultiError, or nil if none found.
func (m *E2SetupFailureIes_E2SetupFailureIes31) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupFailureIes_E2SetupFailureIes31) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 31 {
		err := E2SetupFailureIes_E2SetupFailureIes31ValidationError{
			field:  "Id",
			reason: "value must equal 31",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := E2SetupFailureIes_E2SetupFailureIes31ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if m.GetPresence() != 0 {
		err := E2SetupFailureIes_E2SetupFailureIes31ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return E2SetupFailureIes_E2SetupFailureIes31MultiError(errors)
	}
	return nil
}

// E2SetupFailureIes_E2SetupFailureIes31MultiError is an error wrapping
// multiple validation errors returned by
// E2SetupFailureIes_E2SetupFailureIes31.ValidateAll() if the designated
// constraints aren't met.
type E2SetupFailureIes_E2SetupFailureIes31MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupFailureIes_E2SetupFailureIes31MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupFailureIes_E2SetupFailureIes31MultiError) AllErrors() []error { return m }

// E2SetupFailureIes_E2SetupFailureIes31ValidationError is the validation error
// returned by E2SetupFailureIes_E2SetupFailureIes31.Validate if the
// designated constraints aren't met.
type E2SetupFailureIes_E2SetupFailureIes31ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupFailureIes_E2SetupFailureIes31ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupFailureIes_E2SetupFailureIes31ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupFailureIes_E2SetupFailureIes31ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupFailureIes_E2SetupFailureIes31ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupFailureIes_E2SetupFailureIes31ValidationError) ErrorName() string {
	return "E2SetupFailureIes_E2SetupFailureIes31ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupFailureIes_E2SetupFailureIes31ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupFailureIes_E2SetupFailureIes31.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupFailureIes_E2SetupFailureIes31ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupFailureIes_E2SetupFailureIes31ValidationError{}

// Validate checks the field values on E2SetupFailureIes_E2SetupFailureIes2
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SetupFailureIes_E2SetupFailureIes2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SetupFailureIes_E2SetupFailureIes2
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SetupFailureIes_E2SetupFailureIes2MultiError, or nil if none found.
func (m *E2SetupFailureIes_E2SetupFailureIes2) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SetupFailureIes_E2SetupFailureIes2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 2 {
		err := E2SetupFailureIes_E2SetupFailureIes2ValidationError{
			field:  "Id",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := E2SetupFailureIes_E2SetupFailureIes2ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SetupFailureIes_E2SetupFailureIes2ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SetupFailureIes_E2SetupFailureIes2ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIes_E2SetupFailureIes2ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := E2SetupFailureIes_E2SetupFailureIes2ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return E2SetupFailureIes_E2SetupFailureIes2MultiError(errors)
	}
	return nil
}

// E2SetupFailureIes_E2SetupFailureIes2MultiError is an error wrapping multiple
// validation errors returned by
// E2SetupFailureIes_E2SetupFailureIes2.ValidateAll() if the designated
// constraints aren't met.
type E2SetupFailureIes_E2SetupFailureIes2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SetupFailureIes_E2SetupFailureIes2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SetupFailureIes_E2SetupFailureIes2MultiError) AllErrors() []error { return m }

// E2SetupFailureIes_E2SetupFailureIes2ValidationError is the validation error
// returned by E2SetupFailureIes_E2SetupFailureIes2.Validate if the designated
// constraints aren't met.
type E2SetupFailureIes_E2SetupFailureIes2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupFailureIes_E2SetupFailureIes2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupFailureIes_E2SetupFailureIes2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupFailureIes_E2SetupFailureIes2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupFailureIes_E2SetupFailureIes2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupFailureIes_E2SetupFailureIes2ValidationError) ErrorName() string {
	return "E2SetupFailureIes_E2SetupFailureIes2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupFailureIes_E2SetupFailureIes2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupFailureIes_E2SetupFailureIes2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupFailureIes_E2SetupFailureIes2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupFailureIes_E2SetupFailureIes2ValidationError{}

// Validate checks the field values on ResetRequestIes_ResetRequestIes1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ResetRequestIes_ResetRequestIes1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetRequestIes_ResetRequestIes1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ResetRequestIes_ResetRequestIes1MultiError, or nil if none found.
func (m *ResetRequestIes_ResetRequestIes1) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetRequestIes_ResetRequestIes1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 1 {
		err := ResetRequestIes_ResetRequestIes1ValidationError{
			field:  "Id",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := ResetRequestIes_ResetRequestIes1ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetRequestIes_ResetRequestIes1ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetRequestIes_ResetRequestIes1ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetRequestIes_ResetRequestIes1ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := ResetRequestIes_ResetRequestIes1ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResetRequestIes_ResetRequestIes1MultiError(errors)
	}
	return nil
}

// ResetRequestIes_ResetRequestIes1MultiError is an error wrapping multiple
// validation errors returned by
// ResetRequestIes_ResetRequestIes1.ValidateAll() if the designated
// constraints aren't met.
type ResetRequestIes_ResetRequestIes1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetRequestIes_ResetRequestIes1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetRequestIes_ResetRequestIes1MultiError) AllErrors() []error { return m }

// ResetRequestIes_ResetRequestIes1ValidationError is the validation error
// returned by ResetRequestIes_ResetRequestIes1.Validate if the designated
// constraints aren't met.
type ResetRequestIes_ResetRequestIes1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetRequestIes_ResetRequestIes1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetRequestIes_ResetRequestIes1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetRequestIes_ResetRequestIes1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetRequestIes_ResetRequestIes1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetRequestIes_ResetRequestIes1ValidationError) ErrorName() string {
	return "ResetRequestIes_ResetRequestIes1ValidationError"
}

// Error satisfies the builtin error interface
func (e ResetRequestIes_ResetRequestIes1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetRequestIes_ResetRequestIes1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetRequestIes_ResetRequestIes1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetRequestIes_ResetRequestIes1ValidationError{}

// Validate checks the field values on ResetResponseIes_ResetResponseIes2 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ResetResponseIes_ResetResponseIes2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetResponseIes_ResetResponseIes2
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ResetResponseIes_ResetResponseIes2MultiError, or nil if none found.
func (m *ResetResponseIes_ResetResponseIes2) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetResponseIes_ResetResponseIes2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 2 {
		err := ResetResponseIes_ResetResponseIes2ValidationError{
			field:  "Id",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := ResetResponseIes_ResetResponseIes2ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetResponseIes_ResetResponseIes2ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetResponseIes_ResetResponseIes2ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetResponseIes_ResetResponseIes2ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := ResetResponseIes_ResetResponseIes2ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResetResponseIes_ResetResponseIes2MultiError(errors)
	}
	return nil
}

// ResetResponseIes_ResetResponseIes2MultiError is an error wrapping multiple
// validation errors returned by
// ResetResponseIes_ResetResponseIes2.ValidateAll() if the designated
// constraints aren't met.
type ResetResponseIes_ResetResponseIes2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetResponseIes_ResetResponseIes2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetResponseIes_ResetResponseIes2MultiError) AllErrors() []error { return m }

// ResetResponseIes_ResetResponseIes2ValidationError is the validation error
// returned by ResetResponseIes_ResetResponseIes2.Validate if the designated
// constraints aren't met.
type ResetResponseIes_ResetResponseIes2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetResponseIes_ResetResponseIes2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetResponseIes_ResetResponseIes2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetResponseIes_ResetResponseIes2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetResponseIes_ResetResponseIes2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetResponseIes_ResetResponseIes2ValidationError) ErrorName() string {
	return "ResetResponseIes_ResetResponseIes2ValidationError"
}

// Error satisfies the builtin error interface
func (e ResetResponseIes_ResetResponseIes2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetResponseIes_ResetResponseIes2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetResponseIes_ResetResponseIes2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetResponseIes_ResetResponseIes2ValidationError{}

// Validate checks the field values on
// RicserviceUpdateIes_RicserviceUpdateIes10 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdateIes_RicserviceUpdateIes10) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicserviceUpdateIes_RicserviceUpdateIes10 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RicserviceUpdateIes_RicserviceUpdateIes10MultiError, or nil if none found.
func (m *RicserviceUpdateIes_RicserviceUpdateIes10) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdateIes_RicserviceUpdateIes10) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 10 {
		err := RicserviceUpdateIes_RicserviceUpdateIes10ValidationError{
			field:  "Id",
			reason: "value must equal 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicserviceUpdateIes_RicserviceUpdateIes10ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateIes_RicserviceUpdateIes10ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateIes_RicserviceUpdateIes10ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes10ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RicserviceUpdateIes_RicserviceUpdateIes10ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicserviceUpdateIes_RicserviceUpdateIes10MultiError(errors)
	}
	return nil
}

// RicserviceUpdateIes_RicserviceUpdateIes10MultiError is an error wrapping
// multiple validation errors returned by
// RicserviceUpdateIes_RicserviceUpdateIes10.ValidateAll() if the designated
// constraints aren't met.
type RicserviceUpdateIes_RicserviceUpdateIes10MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateIes_RicserviceUpdateIes10MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateIes_RicserviceUpdateIes10MultiError) AllErrors() []error { return m }

// RicserviceUpdateIes_RicserviceUpdateIes10ValidationError is the validation
// error returned by RicserviceUpdateIes_RicserviceUpdateIes10.Validate if the
// designated constraints aren't met.
type RicserviceUpdateIes_RicserviceUpdateIes10ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateIes_RicserviceUpdateIes10ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateIes_RicserviceUpdateIes10ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateIes_RicserviceUpdateIes10ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateIes_RicserviceUpdateIes10ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateIes_RicserviceUpdateIes10ValidationError) ErrorName() string {
	return "RicserviceUpdateIes_RicserviceUpdateIes10ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateIes_RicserviceUpdateIes10ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateIes_RicserviceUpdateIes10.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateIes_RicserviceUpdateIes10ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateIes_RicserviceUpdateIes10ValidationError{}

// Validate checks the field values on
// RicserviceUpdateIes_RicserviceUpdateIes12 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdateIes_RicserviceUpdateIes12) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicserviceUpdateIes_RicserviceUpdateIes12 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RicserviceUpdateIes_RicserviceUpdateIes12MultiError, or nil if none found.
func (m *RicserviceUpdateIes_RicserviceUpdateIes12) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdateIes_RicserviceUpdateIes12) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 12 {
		err := RicserviceUpdateIes_RicserviceUpdateIes12ValidationError{
			field:  "Id",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicserviceUpdateIes_RicserviceUpdateIes12ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateIes_RicserviceUpdateIes12ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateIes_RicserviceUpdateIes12ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes12ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RicserviceUpdateIes_RicserviceUpdateIes12ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicserviceUpdateIes_RicserviceUpdateIes12MultiError(errors)
	}
	return nil
}

// RicserviceUpdateIes_RicserviceUpdateIes12MultiError is an error wrapping
// multiple validation errors returned by
// RicserviceUpdateIes_RicserviceUpdateIes12.ValidateAll() if the designated
// constraints aren't met.
type RicserviceUpdateIes_RicserviceUpdateIes12MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateIes_RicserviceUpdateIes12MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateIes_RicserviceUpdateIes12MultiError) AllErrors() []error { return m }

// RicserviceUpdateIes_RicserviceUpdateIes12ValidationError is the validation
// error returned by RicserviceUpdateIes_RicserviceUpdateIes12.Validate if the
// designated constraints aren't met.
type RicserviceUpdateIes_RicserviceUpdateIes12ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateIes_RicserviceUpdateIes12ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateIes_RicserviceUpdateIes12ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateIes_RicserviceUpdateIes12ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateIes_RicserviceUpdateIes12ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateIes_RicserviceUpdateIes12ValidationError) ErrorName() string {
	return "RicserviceUpdateIes_RicserviceUpdateIes12ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateIes_RicserviceUpdateIes12ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateIes_RicserviceUpdateIes12.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateIes_RicserviceUpdateIes12ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateIes_RicserviceUpdateIes12ValidationError{}

// Validate checks the field values on
// RicserviceUpdateIes_RicserviceUpdateIes11 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdateIes_RicserviceUpdateIes11) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicserviceUpdateIes_RicserviceUpdateIes11 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RicserviceUpdateIes_RicserviceUpdateIes11MultiError, or nil if none found.
func (m *RicserviceUpdateIes_RicserviceUpdateIes11) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdateIes_RicserviceUpdateIes11) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 11 {
		err := RicserviceUpdateIes_RicserviceUpdateIes11ValidationError{
			field:  "Id",
			reason: "value must equal 11",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicserviceUpdateIes_RicserviceUpdateIes11ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateIes_RicserviceUpdateIes11ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateIes_RicserviceUpdateIes11ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes11ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RicserviceUpdateIes_RicserviceUpdateIes11ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicserviceUpdateIes_RicserviceUpdateIes11MultiError(errors)
	}
	return nil
}

// RicserviceUpdateIes_RicserviceUpdateIes11MultiError is an error wrapping
// multiple validation errors returned by
// RicserviceUpdateIes_RicserviceUpdateIes11.ValidateAll() if the designated
// constraints aren't met.
type RicserviceUpdateIes_RicserviceUpdateIes11MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateIes_RicserviceUpdateIes11MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateIes_RicserviceUpdateIes11MultiError) AllErrors() []error { return m }

// RicserviceUpdateIes_RicserviceUpdateIes11ValidationError is the validation
// error returned by RicserviceUpdateIes_RicserviceUpdateIes11.Validate if the
// designated constraints aren't met.
type RicserviceUpdateIes_RicserviceUpdateIes11ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateIes_RicserviceUpdateIes11ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateIes_RicserviceUpdateIes11ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateIes_RicserviceUpdateIes11ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateIes_RicserviceUpdateIes11ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateIes_RicserviceUpdateIes11ValidationError) ErrorName() string {
	return "RicserviceUpdateIes_RicserviceUpdateIes11ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateIes_RicserviceUpdateIes11ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateIes_RicserviceUpdateIes11.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateIes_RicserviceUpdateIes11ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateIes_RicserviceUpdateIes11ValidationError{}

// Validate checks the field values on RanfunctionItemIes_RanfunctionItemIes8
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RanfunctionItemIes_RanfunctionItemIes8) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanfunctionItemIes_RanfunctionItemIes8 with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RanfunctionItemIes_RanfunctionItemIes8MultiError, or nil if none found.
func (m *RanfunctionItemIes_RanfunctionItemIes8) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionItemIes_RanfunctionItemIes8) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 8 {
		err := RanfunctionItemIes_RanfunctionItemIes8ValidationError{
			field:  "Id",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := RanfunctionItemIes_RanfunctionItemIes8ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionItemIes_RanfunctionItemIes8ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionItemIes_RanfunctionItemIes8ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionItemIes_RanfunctionItemIes8ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RanfunctionItemIes_RanfunctionItemIes8ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RanfunctionItemIes_RanfunctionItemIes8MultiError(errors)
	}
	return nil
}

// RanfunctionItemIes_RanfunctionItemIes8MultiError is an error wrapping
// multiple validation errors returned by
// RanfunctionItemIes_RanfunctionItemIes8.ValidateAll() if the designated
// constraints aren't met.
type RanfunctionItemIes_RanfunctionItemIes8MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionItemIes_RanfunctionItemIes8MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionItemIes_RanfunctionItemIes8MultiError) AllErrors() []error { return m }

// RanfunctionItemIes_RanfunctionItemIes8ValidationError is the validation
// error returned by RanfunctionItemIes_RanfunctionItemIes8.Validate if the
// designated constraints aren't met.
type RanfunctionItemIes_RanfunctionItemIes8ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionItemIes_RanfunctionItemIes8ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionItemIes_RanfunctionItemIes8ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionItemIes_RanfunctionItemIes8ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionItemIes_RanfunctionItemIes8ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionItemIes_RanfunctionItemIes8ValidationError) ErrorName() string {
	return "RanfunctionItemIes_RanfunctionItemIes8ValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionItemIes_RanfunctionItemIes8ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionItemIes_RanfunctionItemIes8.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionItemIes_RanfunctionItemIes8ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionItemIes_RanfunctionItemIes8ValidationError{}

// Validate checks the field values on
// RanfunctionIdItemIes_RanfunctionIdItemIes6 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RanfunctionIdItemIes_RanfunctionIdItemIes6) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanfunctionIdItemIes_RanfunctionIdItemIes6 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RanfunctionIdItemIes_RanfunctionIdItemIes6MultiError, or nil if none found.
func (m *RanfunctionIdItemIes_RanfunctionIdItemIes6) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionIdItemIes_RanfunctionIdItemIes6) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 6 {
		err := RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError{
			field:  "Id",
			reason: "value must equal 6",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RanfunctionIdItemIes_RanfunctionIdItemIes6MultiError(errors)
	}
	return nil
}

// RanfunctionIdItemIes_RanfunctionIdItemIes6MultiError is an error wrapping
// multiple validation errors returned by
// RanfunctionIdItemIes_RanfunctionIdItemIes6.ValidateAll() if the designated
// constraints aren't met.
type RanfunctionIdItemIes_RanfunctionIdItemIes6MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionIdItemIes_RanfunctionIdItemIes6MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionIdItemIes_RanfunctionIdItemIes6MultiError) AllErrors() []error { return m }

// RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError is the validation
// error returned by RanfunctionIdItemIes_RanfunctionIdItemIes6.Validate if
// the designated constraints aren't met.
type RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError) ErrorName() string {
	return "RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionIdItemIes_RanfunctionIdItemIes6.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionIdItemIes_RanfunctionIdItemIes6ValidationError{}

// Validate checks the field values on
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9MultiError,
// or nil if none found.
func (m *RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 9 {
		err := RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError{
			field:  "Id",
			reason: "value must equal 9",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9MultiError(errors)
	}
	return nil
}

// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9MultiError is
// an error wrapping multiple validation errors returned by
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9.ValidateAll()
// if the designated constraints aren't met.
type RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9MultiError) AllErrors() []error {
	return m
}

// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError
// is the validation error returned by
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9.Validate if
// the designated constraints aren't met.
type RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError) ErrorName() string {
	return "RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes9ValidationError{}

// Validate checks the field values on
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13MultiError,
// or nil if none found.
func (m *RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 13 {
		err := RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError{
			field:  "Id",
			reason: "value must equal 13",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13MultiError(errors)
	}
	return nil
}

// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13MultiError is
// an error wrapping multiple validation errors returned by
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13.ValidateAll()
// if the designated constraints aren't met.
type RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13MultiError) AllErrors() []error {
	return m
}

// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError
// is the validation error returned by
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13.Validate if
// the designated constraints aren't met.
type RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError) ErrorName() string {
	return "RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes13ValidationError{}

// Validate checks the field values on
// RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7MultiError, or nil if
// none found.
func (m *RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 7 {
		err := RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError{
			field:  "Id",
			reason: "value must equal 7",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 2 {
		err := RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7MultiError(errors)
	}
	return nil
}

// RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7MultiError is an error
// wrapping multiple validation errors returned by
// RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7.ValidateAll() if the
// designated constraints aren't met.
type RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7MultiError) AllErrors() []error { return m }

// RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError is the
// validation error returned by
// RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7.Validate if the
// designated constraints aren't met.
type RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError) ErrorName() string {
	return "RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionIdcauseItemIes_RanfunctionIdcauseItemIes7ValidationError{}

// Validate checks the field values on
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13MultiError, or nil
// if none found.
func (m *RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 13 {
		err := RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError{
			field:  "Id",
			reason: "value must equal 13",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13MultiError(errors)
	}
	return nil
}

// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13MultiError is an
// error wrapping multiple validation errors returned by
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13.ValidateAll() if
// the designated constraints aren't met.
type RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13MultiError) AllErrors() []error {
	return m
}

// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError is
// the validation error returned by
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13.Validate if the
// designated constraints aren't met.
type RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError) ErrorName() string {
	return "RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateFailureIes_RicserviceUpdateFailureIes13.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateFailureIes_RicserviceUpdateFailureIes13ValidationError{}

// Validate checks the field values on
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31MultiError, or nil
// if none found.
func (m *RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 31 {
		err := RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError{
			field:  "Id",
			reason: "value must equal 31",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if m.GetPresence() != 0 {
		err := RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31MultiError(errors)
	}
	return nil
}

// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31MultiError is an
// error wrapping multiple validation errors returned by
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31.ValidateAll() if
// the designated constraints aren't met.
type RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31MultiError) AllErrors() []error {
	return m
}

// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError is
// the validation error returned by
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31.Validate if the
// designated constraints aren't met.
type RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError) ErrorName() string {
	return "RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateFailureIes_RicserviceUpdateFailureIes31.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateFailureIes_RicserviceUpdateFailureIes31ValidationError{}

// Validate checks the field values on
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2MultiError, or nil if
// none found.
func (m *RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 2 {
		err := RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError{
			field:  "Id",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 1 {
		err := RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2MultiError(errors)
	}
	return nil
}

// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2MultiError is an error
// wrapping multiple validation errors returned by
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2.ValidateAll() if the
// designated constraints aren't met.
type RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2MultiError) AllErrors() []error {
	return m
}

// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError is the
// validation error returned by
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2.Validate if the
// designated constraints aren't met.
type RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError) ErrorName() string {
	return "RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateFailureIes_RicserviceUpdateFailureIes2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateFailureIes_RicserviceUpdateFailureIes2ValidationError{}

// Validate checks the field values on RicserviceQueryIes_RicserviceQueryIes9
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RicserviceQueryIes_RicserviceQueryIes9) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RicserviceQueryIes_RicserviceQueryIes9 with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RicserviceQueryIes_RicserviceQueryIes9MultiError, or nil if none found.
func (m *RicserviceQueryIes_RicserviceQueryIes9) ValidateAll() error {
	return m.validate(true)
}

func (m *RicserviceQueryIes_RicserviceQueryIes9) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 9 {
		err := RicserviceQueryIes_RicserviceQueryIes9ValidationError{
			field:  "Id",
			reason: "value must equal 9",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCriticality() != 0 {
		err := RicserviceQueryIes_RicserviceQueryIes9ValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicserviceQueryIes_RicserviceQueryIes9ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicserviceQueryIes_RicserviceQueryIes9ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceQueryIes_RicserviceQueryIes9ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPresence() != 0 {
		err := RicserviceQueryIes_RicserviceQueryIes9ValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicserviceQueryIes_RicserviceQueryIes9MultiError(errors)
	}
	return nil
}

// RicserviceQueryIes_RicserviceQueryIes9MultiError is an error wrapping
// multiple validation errors returned by
// RicserviceQueryIes_RicserviceQueryIes9.ValidateAll() if the designated
// constraints aren't met.
type RicserviceQueryIes_RicserviceQueryIes9MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicserviceQueryIes_RicserviceQueryIes9MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicserviceQueryIes_RicserviceQueryIes9MultiError) AllErrors() []error { return m }

// RicserviceQueryIes_RicserviceQueryIes9ValidationError is the validation
// error returned by RicserviceQueryIes_RicserviceQueryIes9.Validate if the
// designated constraints aren't met.
type RicserviceQueryIes_RicserviceQueryIes9ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceQueryIes_RicserviceQueryIes9ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceQueryIes_RicserviceQueryIes9ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceQueryIes_RicserviceQueryIes9ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceQueryIes_RicserviceQueryIes9ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceQueryIes_RicserviceQueryIes9ValidationError) ErrorName() string {
	return "RicserviceQueryIes_RicserviceQueryIes9ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceQueryIes_RicserviceQueryIes9ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceQueryIes_RicserviceQueryIes9.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceQueryIes_RicserviceQueryIes9ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceQueryIes_RicserviceQueryIes9ValidationError{}
