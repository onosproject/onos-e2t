// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/e2ap/v1beta1/e2ap_ies.proto

package e2apies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Cause with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Cause) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cause with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CauseMultiError, or nil if none found.
func (m *Cause) ValidateAll() error {
	return m.validate(true)
}

func (m *Cause) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Cause.(type) {

	case *Cause_RicRequest:
		// no validation rules for RicRequest

	case *Cause_RicService:
		// no validation rules for RicService

	case *Cause_Transport:
		// no validation rules for Transport

	case *Cause_Protocol:
		// no validation rules for Protocol

	case *Cause_Misc:
		// no validation rules for Misc

	}

	if len(errors) > 0 {
		return CauseMultiError(errors)
	}
	return nil
}

// CauseMultiError is an error wrapping multiple validation errors returned by
// Cause.ValidateAll() if the designated constraints aren't met.
type CauseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CauseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CauseMultiError) AllErrors() []error { return m }

// CauseValidationError is the validation error returned by Cause.Validate if
// the designated constraints aren't met.
type CauseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CauseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CauseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CauseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CauseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CauseValidationError) ErrorName() string { return "CauseValidationError" }

// Error satisfies the builtin error interface
func (e CauseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCause.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CauseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CauseValidationError{}

// Validate checks the field values on CriticalityDiagnostics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CriticalityDiagnostics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CriticalityDiagnostics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CriticalityDiagnosticsMultiError, or nil if none found.
func (m *CriticalityDiagnostics) ValidateAll() error {
	return m.validate(true)
}

func (m *CriticalityDiagnostics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProcedureCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CriticalityDiagnosticsValidationError{
					field:  "ProcedureCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CriticalityDiagnosticsValidationError{
					field:  "ProcedureCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CriticalityDiagnosticsValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TriggeringMessage

	// no validation rules for ProcedureCriticality

	if all {
		switch v := interface{}(m.GetRicRequestorId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CriticalityDiagnosticsValidationError{
					field:  "RicRequestorId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CriticalityDiagnosticsValidationError{
					field:  "RicRequestorId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicRequestorId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CriticalityDiagnosticsValidationError{
				field:  "RicRequestorId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIEsCriticalityDiagnostics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CriticalityDiagnosticsValidationError{
					field:  "IEsCriticalityDiagnostics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CriticalityDiagnosticsValidationError{
					field:  "IEsCriticalityDiagnostics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIEsCriticalityDiagnostics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CriticalityDiagnosticsValidationError{
				field:  "IEsCriticalityDiagnostics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CriticalityDiagnosticsMultiError(errors)
	}
	return nil
}

// CriticalityDiagnosticsMultiError is an error wrapping multiple validation
// errors returned by CriticalityDiagnostics.ValidateAll() if the designated
// constraints aren't met.
type CriticalityDiagnosticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CriticalityDiagnosticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CriticalityDiagnosticsMultiError) AllErrors() []error { return m }

// CriticalityDiagnosticsValidationError is the validation error returned by
// CriticalityDiagnostics.Validate if the designated constraints aren't met.
type CriticalityDiagnosticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CriticalityDiagnosticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CriticalityDiagnosticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CriticalityDiagnosticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CriticalityDiagnosticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CriticalityDiagnosticsValidationError) ErrorName() string {
	return "CriticalityDiagnosticsValidationError"
}

// Error satisfies the builtin error interface
func (e CriticalityDiagnosticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCriticalityDiagnostics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CriticalityDiagnosticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CriticalityDiagnosticsValidationError{}

// Validate checks the field values on CriticalityDiagnosticsIeList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CriticalityDiagnosticsIeList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CriticalityDiagnosticsIeList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CriticalityDiagnosticsIeListMultiError, or nil if none found.
func (m *CriticalityDiagnosticsIeList) ValidateAll() error {
	return m.validate(true)
}

func (m *CriticalityDiagnosticsIeList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CriticalityDiagnosticsIeListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CriticalityDiagnosticsIeListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CriticalityDiagnosticsIeListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CriticalityDiagnosticsIeListMultiError(errors)
	}
	return nil
}

// CriticalityDiagnosticsIeListMultiError is an error wrapping multiple
// validation errors returned by CriticalityDiagnosticsIeList.ValidateAll() if
// the designated constraints aren't met.
type CriticalityDiagnosticsIeListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CriticalityDiagnosticsIeListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CriticalityDiagnosticsIeListMultiError) AllErrors() []error { return m }

// CriticalityDiagnosticsIeListValidationError is the validation error returned
// by CriticalityDiagnosticsIeList.Validate if the designated constraints
// aren't met.
type CriticalityDiagnosticsIeListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CriticalityDiagnosticsIeListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CriticalityDiagnosticsIeListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CriticalityDiagnosticsIeListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CriticalityDiagnosticsIeListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CriticalityDiagnosticsIeListValidationError) ErrorName() string {
	return "CriticalityDiagnosticsIeListValidationError"
}

// Error satisfies the builtin error interface
func (e CriticalityDiagnosticsIeListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCriticalityDiagnosticsIeList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CriticalityDiagnosticsIeListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CriticalityDiagnosticsIeListValidationError{}

// Validate checks the field values on CriticalityDiagnosticsIeItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CriticalityDiagnosticsIeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CriticalityDiagnosticsIeItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CriticalityDiagnosticsIeItemMultiError, or nil if none found.
func (m *CriticalityDiagnosticsIeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CriticalityDiagnosticsIeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IEcriticality

	if all {
		switch v := interface{}(m.GetIEId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CriticalityDiagnosticsIeItemValidationError{
					field:  "IEId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CriticalityDiagnosticsIeItemValidationError{
					field:  "IEId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIEId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CriticalityDiagnosticsIeItemValidationError{
				field:  "IEId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TypeOfError

	if len(errors) > 0 {
		return CriticalityDiagnosticsIeItemMultiError(errors)
	}
	return nil
}

// CriticalityDiagnosticsIeItemMultiError is an error wrapping multiple
// validation errors returned by CriticalityDiagnosticsIeItem.ValidateAll() if
// the designated constraints aren't met.
type CriticalityDiagnosticsIeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CriticalityDiagnosticsIeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CriticalityDiagnosticsIeItemMultiError) AllErrors() []error { return m }

// CriticalityDiagnosticsIeItemValidationError is the validation error returned
// by CriticalityDiagnosticsIeItem.Validate if the designated constraints
// aren't met.
type CriticalityDiagnosticsIeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CriticalityDiagnosticsIeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CriticalityDiagnosticsIeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CriticalityDiagnosticsIeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CriticalityDiagnosticsIeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CriticalityDiagnosticsIeItemValidationError) ErrorName() string {
	return "CriticalityDiagnosticsIeItemValidationError"
}

// Error satisfies the builtin error interface
func (e CriticalityDiagnosticsIeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCriticalityDiagnosticsIeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CriticalityDiagnosticsIeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CriticalityDiagnosticsIeItemValidationError{}

// Validate checks the field values on EnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EnbIdMultiError, or nil if none found.
func (m *EnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *EnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EnbId.(type) {

	case *EnbId_MacroENbId:

		if all {
			switch v := interface{}(m.GetMacroENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "MacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "MacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "MacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_HomeENbId:

		if all {
			switch v := interface{}(m.GetHomeENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "HomeENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "HomeENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHomeENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "HomeENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_ShortMacroENbId:

		if all {
			switch v := interface{}(m.GetShortMacroENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "ShortMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "ShortMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShortMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "ShortMacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_LongMacroENbId:

		if all {
			switch v := interface{}(m.GetLongMacroENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "LongMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "LongMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLongMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "LongMacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EnbIdMultiError(errors)
	}
	return nil
}

// EnbIdMultiError is an error wrapping multiple validation errors returned by
// EnbId.ValidateAll() if the designated constraints aren't met.
type EnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnbIdMultiError) AllErrors() []error { return m }

// EnbIdValidationError is the validation error returned by EnbId.Validate if
// the designated constraints aren't met.
type EnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIdValidationError) ErrorName() string { return "EnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIdValidationError{}

// Validate checks the field values on EnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnbIdChoice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnbIdChoiceMultiError, or
// nil if none found.
func (m *EnbIdChoice) ValidateAll() error {
	return m.validate(true)
}

func (m *EnbIdChoice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EnbIdChoice.(type) {

	case *EnbIdChoice_EnbIdMacro:

		if all {
			switch v := interface{}(m.GetEnbIdMacro()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdChoiceValidationError{
						field:  "EnbIdMacro",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdChoiceValidationError{
						field:  "EnbIdMacro",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnbIdMacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdMacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbIdChoice_EnbIdShortmacro:

		if all {
			switch v := interface{}(m.GetEnbIdShortmacro()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdChoiceValidationError{
						field:  "EnbIdShortmacro",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdChoiceValidationError{
						field:  "EnbIdShortmacro",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnbIdShortmacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdShortmacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbIdChoice_EnbIdLongmacro:

		if all {
			switch v := interface{}(m.GetEnbIdLongmacro()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdChoiceValidationError{
						field:  "EnbIdLongmacro",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdChoiceValidationError{
						field:  "EnbIdLongmacro",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnbIdLongmacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdLongmacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EnbIdChoiceMultiError(errors)
	}
	return nil
}

// EnbIdChoiceMultiError is an error wrapping multiple validation errors
// returned by EnbIdChoice.ValidateAll() if the designated constraints aren't met.
type EnbIdChoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnbIdChoiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnbIdChoiceMultiError) AllErrors() []error { return m }

// EnbIdChoiceValidationError is the validation error returned by
// EnbIdChoice.Validate if the designated constraints aren't met.
type EnbIdChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIdChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIdChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIdChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIdChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIdChoiceValidationError) ErrorName() string { return "EnbIdChoiceValidationError" }

// Error satisfies the builtin error interface
func (e EnbIdChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbIdChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIdChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIdChoiceValidationError{}

// Validate checks the field values on EngnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EngnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EngnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EngnbIdMultiError, or nil if none found.
func (m *EngnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *EngnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EngnbId.(type) {

	case *EngnbId_GNbId:

		if all {
			switch v := interface{}(m.GetGNbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EngnbIdValidationError{
						field:  "GNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EngnbIdValidationError{
						field:  "GNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EngnbIdValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EngnbIdMultiError(errors)
	}
	return nil
}

// EngnbIdMultiError is an error wrapping multiple validation errors returned
// by EngnbId.ValidateAll() if the designated constraints aren't met.
type EngnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EngnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EngnbIdMultiError) AllErrors() []error { return m }

// EngnbIdValidationError is the validation error returned by EngnbId.Validate
// if the designated constraints aren't met.
type EngnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EngnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EngnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EngnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EngnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EngnbIdValidationError) ErrorName() string { return "EngnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EngnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEngnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EngnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EngnbIdValidationError{}

// Validate checks the field values on GlobalE2NodeId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalE2NodeId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalE2NodeId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalE2NodeIdMultiError,
// or nil if none found.
func (m *GlobalE2NodeId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalE2NodeId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.GlobalE2NodeId.(type) {

	case *GlobalE2NodeId_GNb:

		if all {
			switch v := interface{}(m.GetGNb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GlobalE2NodeIdValidationError{
						field:  "GNb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GlobalE2NodeIdValidationError{
						field:  "GNb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalE2NodeIdValidationError{
					field:  "GNb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalE2NodeId_EnGNb:

		if all {
			switch v := interface{}(m.GetEnGNb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GlobalE2NodeIdValidationError{
						field:  "EnGNb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GlobalE2NodeIdValidationError{
						field:  "EnGNb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnGNb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalE2NodeIdValidationError{
					field:  "EnGNb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalE2NodeId_NgENb:

		if all {
			switch v := interface{}(m.GetNgENb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GlobalE2NodeIdValidationError{
						field:  "NgENb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GlobalE2NodeIdValidationError{
						field:  "NgENb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNgENb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalE2NodeIdValidationError{
					field:  "NgENb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalE2NodeId_ENb:

		if all {
			switch v := interface{}(m.GetENb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GlobalE2NodeIdValidationError{
						field:  "ENb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GlobalE2NodeIdValidationError{
						field:  "ENb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetENb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalE2NodeIdValidationError{
					field:  "ENb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GlobalE2NodeIdMultiError(errors)
	}
	return nil
}

// GlobalE2NodeIdMultiError is an error wrapping multiple validation errors
// returned by GlobalE2NodeId.ValidateAll() if the designated constraints
// aren't met.
type GlobalE2NodeIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalE2NodeIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalE2NodeIdMultiError) AllErrors() []error { return m }

// GlobalE2NodeIdValidationError is the validation error returned by
// GlobalE2NodeId.Validate if the designated constraints aren't met.
type GlobalE2NodeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalE2NodeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalE2NodeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalE2NodeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalE2NodeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalE2NodeIdValidationError) ErrorName() string { return "GlobalE2NodeIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalE2NodeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalE2NodeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalE2NodeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalE2NodeIdValidationError{}

// Validate checks the field values on GlobalE2NodeEnGnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GlobalE2NodeEnGnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalE2NodeEnGnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalE2NodeEnGnbIdMultiError, or nil if none found.
func (m *GlobalE2NodeEnGnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalE2NodeEnGnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalGNbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalE2NodeEnGnbIdValidationError{
					field:  "GlobalGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalE2NodeEnGnbIdValidationError{
					field:  "GlobalGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalE2NodeEnGnbIdValidationError{
				field:  "GlobalGNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalE2NodeEnGnbIdMultiError(errors)
	}
	return nil
}

// GlobalE2NodeEnGnbIdMultiError is an error wrapping multiple validation
// errors returned by GlobalE2NodeEnGnbId.ValidateAll() if the designated
// constraints aren't met.
type GlobalE2NodeEnGnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalE2NodeEnGnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalE2NodeEnGnbIdMultiError) AllErrors() []error { return m }

// GlobalE2NodeEnGnbIdValidationError is the validation error returned by
// GlobalE2NodeEnGnbId.Validate if the designated constraints aren't met.
type GlobalE2NodeEnGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalE2NodeEnGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalE2NodeEnGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalE2NodeEnGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalE2NodeEnGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalE2NodeEnGnbIdValidationError) ErrorName() string {
	return "GlobalE2NodeEnGnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalE2NodeEnGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalE2NodeEnGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalE2NodeEnGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalE2NodeEnGnbIdValidationError{}

// Validate checks the field values on GlobalE2NodeEnbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GlobalE2NodeEnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalE2NodeEnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalE2NodeEnbIdMultiError, or nil if none found.
func (m *GlobalE2NodeEnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalE2NodeEnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalENbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalE2NodeEnbIdValidationError{
					field:  "GlobalENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalE2NodeEnbIdValidationError{
					field:  "GlobalENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalE2NodeEnbIdValidationError{
				field:  "GlobalENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalE2NodeEnbIdMultiError(errors)
	}
	return nil
}

// GlobalE2NodeEnbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalE2NodeEnbId.ValidateAll() if the designated constraints
// aren't met.
type GlobalE2NodeEnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalE2NodeEnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalE2NodeEnbIdMultiError) AllErrors() []error { return m }

// GlobalE2NodeEnbIdValidationError is the validation error returned by
// GlobalE2NodeEnbId.Validate if the designated constraints aren't met.
type GlobalE2NodeEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalE2NodeEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalE2NodeEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalE2NodeEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalE2NodeEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalE2NodeEnbIdValidationError) ErrorName() string {
	return "GlobalE2NodeEnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalE2NodeEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalE2NodeEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalE2NodeEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalE2NodeEnbIdValidationError{}

// Validate checks the field values on GlobalE2NodeGnbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GlobalE2NodeGnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalE2NodeGnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalE2NodeGnbIdMultiError, or nil if none found.
func (m *GlobalE2NodeGnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalE2NodeGnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalGNbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalE2NodeGnbIdValidationError{
					field:  "GlobalGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalE2NodeGnbIdValidationError{
					field:  "GlobalGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalE2NodeGnbIdValidationError{
				field:  "GlobalGNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGNbCuUpId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalE2NodeGnbIdValidationError{
					field:  "GNbCuUpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalE2NodeGnbIdValidationError{
					field:  "GNbCuUpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuUpId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalE2NodeGnbIdValidationError{
				field:  "GNbCuUpId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGNbDuId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalE2NodeGnbIdValidationError{
					field:  "GNbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalE2NodeGnbIdValidationError{
					field:  "GNbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalE2NodeGnbIdValidationError{
				field:  "GNbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalE2NodeGnbIdMultiError(errors)
	}
	return nil
}

// GlobalE2NodeGnbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalE2NodeGnbId.ValidateAll() if the designated constraints
// aren't met.
type GlobalE2NodeGnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalE2NodeGnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalE2NodeGnbIdMultiError) AllErrors() []error { return m }

// GlobalE2NodeGnbIdValidationError is the validation error returned by
// GlobalE2NodeGnbId.Validate if the designated constraints aren't met.
type GlobalE2NodeGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalE2NodeGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalE2NodeGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalE2NodeGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalE2NodeGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalE2NodeGnbIdValidationError) ErrorName() string {
	return "GlobalE2NodeGnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalE2NodeGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalE2NodeGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalE2NodeGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalE2NodeGnbIdValidationError{}

// Validate checks the field values on GlobalE2NodeNgEnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GlobalE2NodeNgEnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalE2NodeNgEnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalE2NodeNgEnbIdMultiError, or nil if none found.
func (m *GlobalE2NodeNgEnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalE2NodeNgEnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalNgENbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalE2NodeNgEnbIdValidationError{
					field:  "GlobalNgENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalE2NodeNgEnbIdValidationError{
					field:  "GlobalNgENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalNgENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalE2NodeNgEnbIdValidationError{
				field:  "GlobalNgENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalE2NodeNgEnbIdMultiError(errors)
	}
	return nil
}

// GlobalE2NodeNgEnbIdMultiError is an error wrapping multiple validation
// errors returned by GlobalE2NodeNgEnbId.ValidateAll() if the designated
// constraints aren't met.
type GlobalE2NodeNgEnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalE2NodeNgEnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalE2NodeNgEnbIdMultiError) AllErrors() []error { return m }

// GlobalE2NodeNgEnbIdValidationError is the validation error returned by
// GlobalE2NodeNgEnbId.Validate if the designated constraints aren't met.
type GlobalE2NodeNgEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalE2NodeNgEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalE2NodeNgEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalE2NodeNgEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalE2NodeNgEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalE2NodeNgEnbIdValidationError) ErrorName() string {
	return "GlobalE2NodeNgEnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalE2NodeNgEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalE2NodeNgEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalE2NodeNgEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalE2NodeNgEnbIdValidationError{}

// Validate checks the field values on GlobalEnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalEnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalEnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalEnbIdMultiError, or
// nil if none found.
func (m *GlobalEnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalEnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalEnbIdValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalEnbIdValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetENbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalEnbIdValidationError{
					field:  "ENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalEnbIdValidationError{
					field:  "ENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "ENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalEnbIdMultiError(errors)
	}
	return nil
}

// GlobalEnbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalEnbId.ValidateAll() if the designated constraints aren't met.
type GlobalEnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalEnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalEnbIdMultiError) AllErrors() []error { return m }

// GlobalEnbIdValidationError is the validation error returned by
// GlobalEnbId.Validate if the designated constraints aren't met.
type GlobalEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalEnbIdValidationError) ErrorName() string { return "GlobalEnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalEnbIdValidationError{}

// Validate checks the field values on GlobalenGnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalenGnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalenGnbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalenGnbIdMultiError, or
// nil if none found.
func (m *GlobalenGnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalenGnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalenGnbIdValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalenGnbIdValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGNbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalenGnbIdValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalenGnbIdValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "GNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalenGnbIdMultiError(errors)
	}
	return nil
}

// GlobalenGnbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalenGnbId.ValidateAll() if the designated constraints
// aren't met.
type GlobalenGnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalenGnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalenGnbIdMultiError) AllErrors() []error { return m }

// GlobalenGnbIdValidationError is the validation error returned by
// GlobalenGnbId.Validate if the designated constraints aren't met.
type GlobalenGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalenGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalenGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalenGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalenGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalenGnbIdValidationError) ErrorName() string { return "GlobalenGnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalenGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalenGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalenGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalenGnbIdValidationError{}

// Validate checks the field values on GlobalgNbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalgNbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalgNbId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalgNbIdMultiError, or
// nil if none found.
func (m *GlobalgNbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalgNbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlmnId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalgNbIdValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalgNbIdValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalgNbIdValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalgNbIdValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalgNbIdValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalgNbIdValidationError{
				field:  "GnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalgNbIdMultiError(errors)
	}
	return nil
}

// GlobalgNbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalgNbId.ValidateAll() if the designated constraints aren't met.
type GlobalgNbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalgNbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalgNbIdMultiError) AllErrors() []error { return m }

// GlobalgNbIdValidationError is the validation error returned by
// GlobalgNbId.Validate if the designated constraints aren't met.
type GlobalgNbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalgNbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalgNbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalgNbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalgNbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalgNbIdValidationError) ErrorName() string { return "GlobalgNbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalgNbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalgNbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalgNbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalgNbIdValidationError{}

// Validate checks the field values on GlobalngeNbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalngeNbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalngeNbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalngeNbIdMultiError, or
// nil if none found.
func (m *GlobalngeNbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalngeNbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlmnId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalngeNbIdValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalngeNbIdValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalngeNbIdValidationError{
					field:  "EnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalngeNbIdValidationError{
					field:  "EnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "EnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalngeNbIdMultiError(errors)
	}
	return nil
}

// GlobalngeNbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalngeNbId.ValidateAll() if the designated constraints
// aren't met.
type GlobalngeNbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalngeNbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalngeNbIdMultiError) AllErrors() []error { return m }

// GlobalngeNbIdValidationError is the validation error returned by
// GlobalngeNbId.Validate if the designated constraints aren't met.
type GlobalngeNbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalngeNbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalngeNbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalngeNbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalngeNbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalngeNbIdValidationError) ErrorName() string { return "GlobalngeNbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalngeNbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalngeNbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalngeNbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalngeNbIdValidationError{}

// Validate checks the field values on GlobalRicId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalRicId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalRicId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalRicIdMultiError, or
// nil if none found.
func (m *GlobalRicId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalRicId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalRicIdValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalRicIdValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalRicIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalRicIdValidationError{
					field:  "RicId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalRicIdValidationError{
					field:  "RicId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalRicIdValidationError{
				field:  "RicId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalRicIdMultiError(errors)
	}
	return nil
}

// GlobalRicIdMultiError is an error wrapping multiple validation errors
// returned by GlobalRicId.ValidateAll() if the designated constraints aren't met.
type GlobalRicIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalRicIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalRicIdMultiError) AllErrors() []error { return m }

// GlobalRicIdValidationError is the validation error returned by
// GlobalRicId.Validate if the designated constraints aren't met.
type GlobalRicIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalRicIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalRicIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalRicIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalRicIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalRicIdValidationError) ErrorName() string { return "GlobalRicIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalRicIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalRicId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalRicIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalRicIdValidationError{}

// Validate checks the field values on GnbCuUpId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbCuUpId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbCuUpId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbCuUpIdMultiError, or nil
// if none found.
func (m *GnbCuUpId) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbCuUpId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		err := GnbCuUpIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbCuUpIdMultiError(errors)
	}
	return nil
}

// GnbCuUpIdMultiError is an error wrapping multiple validation errors returned
// by GnbCuUpId.ValidateAll() if the designated constraints aren't met.
type GnbCuUpIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbCuUpIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbCuUpIdMultiError) AllErrors() []error { return m }

// GnbCuUpIdValidationError is the validation error returned by
// GnbCuUpId.Validate if the designated constraints aren't met.
type GnbCuUpIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuUpIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuUpIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuUpIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuUpIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuUpIdValidationError) ErrorName() string { return "GnbCuUpIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuUpIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuUpId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuUpIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuUpIdValidationError{}

// Validate checks the field values on GnbDuId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbDuId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbDuId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GnbDuIdMultiError, or nil if none found.
func (m *GnbDuId) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbDuId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		err := GnbDuIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbDuIdMultiError(errors)
	}
	return nil
}

// GnbDuIdMultiError is an error wrapping multiple validation errors returned
// by GnbDuId.ValidateAll() if the designated constraints aren't met.
type GnbDuIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbDuIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbDuIdMultiError) AllErrors() []error { return m }

// GnbDuIdValidationError is the validation error returned by GnbDuId.Validate
// if the designated constraints aren't met.
type GnbDuIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbDuIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbDuIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbDuIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbDuIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbDuIdValidationError) ErrorName() string { return "GnbDuIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbDuIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbDuId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbDuIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbDuIdValidationError{}

// Validate checks the field values on GnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbIdChoice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbIdChoiceMultiError, or
// nil if none found.
func (m *GnbIdChoice) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbIdChoice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.GnbIdChoice.(type) {

	case *GnbIdChoice_GnbId:

		if all {
			switch v := interface{}(m.GetGnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GnbIdChoiceValidationError{
						field:  "GnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GnbIdChoiceValidationError{
						field:  "GnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GnbIdChoiceValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GnbIdChoiceMultiError(errors)
	}
	return nil
}

// GnbIdChoiceMultiError is an error wrapping multiple validation errors
// returned by GnbIdChoice.ValidateAll() if the designated constraints aren't met.
type GnbIdChoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbIdChoiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbIdChoiceMultiError) AllErrors() []error { return m }

// GnbIdChoiceValidationError is the validation error returned by
// GnbIdChoice.Validate if the designated constraints aren't met.
type GnbIdChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbIdChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbIdChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbIdChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbIdChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbIdChoiceValidationError) ErrorName() string { return "GnbIdChoiceValidationError" }

// Error satisfies the builtin error interface
func (e GnbIdChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbIdChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbIdChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbIdChoiceValidationError{}

// Validate checks the field values on RanfunctionId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RanfunctionId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RanfunctionIdMultiError, or
// nil if none found.
func (m *RanfunctionId) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4095 {
		err := RanfunctionIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4095]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RanfunctionIdMultiError(errors)
	}
	return nil
}

// RanfunctionIdMultiError is an error wrapping multiple validation errors
// returned by RanfunctionId.ValidateAll() if the designated constraints
// aren't met.
type RanfunctionIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionIdMultiError) AllErrors() []error { return m }

// RanfunctionIdValidationError is the validation error returned by
// RanfunctionId.Validate if the designated constraints aren't met.
type RanfunctionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionIdValidationError) ErrorName() string { return "RanfunctionIdValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionIdValidationError{}

// Validate checks the field values on RanfunctionRevision with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionRevision) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionRevision with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionRevisionMultiError, or nil if none found.
func (m *RanfunctionRevision) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionRevision) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4095 {
		err := RanfunctionRevisionValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4095]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RanfunctionRevisionMultiError(errors)
	}
	return nil
}

// RanfunctionRevisionMultiError is an error wrapping multiple validation
// errors returned by RanfunctionRevision.ValidateAll() if the designated
// constraints aren't met.
type RanfunctionRevisionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionRevisionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionRevisionMultiError) AllErrors() []error { return m }

// RanfunctionRevisionValidationError is the validation error returned by
// RanfunctionRevision.Validate if the designated constraints aren't met.
type RanfunctionRevisionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionRevisionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionRevisionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionRevisionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionRevisionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionRevisionValidationError) ErrorName() string {
	return "RanfunctionRevisionValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionRevisionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionRevision.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionRevisionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionRevisionValidationError{}

// Validate checks the field values on RicactionId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicactionId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicactionId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicactionIdMultiError, or
// nil if none found.
func (m *RicactionId) ValidateAll() error {
	return m.validate(true)
}

func (m *RicactionId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 255 {
		err := RicactionIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicactionIdMultiError(errors)
	}
	return nil
}

// RicactionIdMultiError is an error wrapping multiple validation errors
// returned by RicactionId.ValidateAll() if the designated constraints aren't met.
type RicactionIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicactionIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicactionIdMultiError) AllErrors() []error { return m }

// RicactionIdValidationError is the validation error returned by
// RicactionId.Validate if the designated constraints aren't met.
type RicactionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionIdValidationError) ErrorName() string { return "RicactionIdValidationError" }

// Error satisfies the builtin error interface
func (e RicactionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionIdValidationError{}

// Validate checks the field values on RicindicationSn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RicindicationSn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicindicationSn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicindicationSnMultiError, or nil if none found.
func (m *RicindicationSn) ValidateAll() error {
	return m.validate(true)
}

func (m *RicindicationSn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 65535 {
		err := RicindicationSnValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicindicationSnMultiError(errors)
	}
	return nil
}

// RicindicationSnMultiError is an error wrapping multiple validation errors
// returned by RicindicationSn.ValidateAll() if the designated constraints
// aren't met.
type RicindicationSnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicindicationSnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicindicationSnMultiError) AllErrors() []error { return m }

// RicindicationSnValidationError is the validation error returned by
// RicindicationSn.Validate if the designated constraints aren't met.
type RicindicationSnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationSnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationSnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationSnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationSnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationSnValidationError) ErrorName() string { return "RicindicationSnValidationError" }

// Error satisfies the builtin error interface
func (e RicindicationSnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationSn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationSnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationSnValidationError{}

// Validate checks the field values on RicrequestId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicrequestId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicrequestId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicrequestIdMultiError, or
// nil if none found.
func (m *RicrequestId) ValidateAll() error {
	return m.validate(true)
}

func (m *RicrequestId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RicRequestorId

	// no validation rules for RicInstanceId

	if len(errors) > 0 {
		return RicrequestIdMultiError(errors)
	}
	return nil
}

// RicrequestIdMultiError is an error wrapping multiple validation errors
// returned by RicrequestId.ValidateAll() if the designated constraints aren't met.
type RicrequestIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicrequestIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicrequestIdMultiError) AllErrors() []error { return m }

// RicrequestIdValidationError is the validation error returned by
// RicrequestId.Validate if the designated constraints aren't met.
type RicrequestIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicrequestIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicrequestIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicrequestIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicrequestIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicrequestIdValidationError) ErrorName() string { return "RicrequestIdValidationError" }

// Error satisfies the builtin error interface
func (e RicrequestIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicrequestId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicrequestIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicrequestIdValidationError{}

// Validate checks the field values on RicsubsequentAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicsubsequentAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicsubsequentAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicsubsequentActionMultiError, or nil if none found.
func (m *RicsubsequentAction) ValidateAll() error {
	return m.validate(true)
}

func (m *RicsubsequentAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RicSubsequentActionType

	// no validation rules for RicTimeToWait

	if len(errors) > 0 {
		return RicsubsequentActionMultiError(errors)
	}
	return nil
}

// RicsubsequentActionMultiError is an error wrapping multiple validation
// errors returned by RicsubsequentAction.ValidateAll() if the designated
// constraints aren't met.
type RicsubsequentActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicsubsequentActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicsubsequentActionMultiError) AllErrors() []error { return m }

// RicsubsequentActionValidationError is the validation error returned by
// RicsubsequentAction.Validate if the designated constraints aren't met.
type RicsubsequentActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubsequentActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubsequentActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubsequentActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubsequentActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubsequentActionValidationError) ErrorName() string {
	return "RicsubsequentActionValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubsequentActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubsequentAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubsequentActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubsequentActionValidationError{}
