// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/e2ap/v1beta2/e2ap_commondatatypes.proto

package e2ap_commondatatypes

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CriticalityReject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CriticalityReject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CriticalityReject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CriticalityRejectMultiError, or nil if none found.
func (m *CriticalityReject) ValidateAll() error {
	return m.validate(true)
}

func (m *CriticalityReject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCriticality() != 0 {
		err := CriticalityRejectValidationError{
			field:  "Criticality",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CriticalityRejectMultiError(errors)
	}
	return nil
}

// CriticalityRejectMultiError is an error wrapping multiple validation errors
// returned by CriticalityReject.ValidateAll() if the designated constraints
// aren't met.
type CriticalityRejectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CriticalityRejectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CriticalityRejectMultiError) AllErrors() []error { return m }

// CriticalityRejectValidationError is the validation error returned by
// CriticalityReject.Validate if the designated constraints aren't met.
type CriticalityRejectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CriticalityRejectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CriticalityRejectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CriticalityRejectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CriticalityRejectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CriticalityRejectValidationError) ErrorName() string {
	return "CriticalityRejectValidationError"
}

// Error satisfies the builtin error interface
func (e CriticalityRejectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCriticalityReject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CriticalityRejectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CriticalityRejectValidationError{}

// Validate checks the field values on CriticalityIgnore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CriticalityIgnore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CriticalityIgnore with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CriticalityIgnoreMultiError, or nil if none found.
func (m *CriticalityIgnore) ValidateAll() error {
	return m.validate(true)
}

func (m *CriticalityIgnore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCriticality() != 1 {
		err := CriticalityIgnoreValidationError{
			field:  "Criticality",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CriticalityIgnoreMultiError(errors)
	}
	return nil
}

// CriticalityIgnoreMultiError is an error wrapping multiple validation errors
// returned by CriticalityIgnore.ValidateAll() if the designated constraints
// aren't met.
type CriticalityIgnoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CriticalityIgnoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CriticalityIgnoreMultiError) AllErrors() []error { return m }

// CriticalityIgnoreValidationError is the validation error returned by
// CriticalityIgnore.Validate if the designated constraints aren't met.
type CriticalityIgnoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CriticalityIgnoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CriticalityIgnoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CriticalityIgnoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CriticalityIgnoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CriticalityIgnoreValidationError) ErrorName() string {
	return "CriticalityIgnoreValidationError"
}

// Error satisfies the builtin error interface
func (e CriticalityIgnoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCriticalityIgnore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CriticalityIgnoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CriticalityIgnoreValidationError{}

// Validate checks the field values on CriticalityNotify with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CriticalityNotify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CriticalityNotify with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CriticalityNotifyMultiError, or nil if none found.
func (m *CriticalityNotify) ValidateAll() error {
	return m.validate(true)
}

func (m *CriticalityNotify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCriticality() != 2 {
		err := CriticalityNotifyValidationError{
			field:  "Criticality",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CriticalityNotifyMultiError(errors)
	}
	return nil
}

// CriticalityNotifyMultiError is an error wrapping multiple validation errors
// returned by CriticalityNotify.ValidateAll() if the designated constraints
// aren't met.
type CriticalityNotifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CriticalityNotifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CriticalityNotifyMultiError) AllErrors() []error { return m }

// CriticalityNotifyValidationError is the validation error returned by
// CriticalityNotify.Validate if the designated constraints aren't met.
type CriticalityNotifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CriticalityNotifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CriticalityNotifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CriticalityNotifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CriticalityNotifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CriticalityNotifyValidationError) ErrorName() string {
	return "CriticalityNotifyValidationError"
}

// Error satisfies the builtin error interface
func (e CriticalityNotifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCriticalityNotify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CriticalityNotifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CriticalityNotifyValidationError{}

// Validate checks the field values on PresenceOptional with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PresenceOptional) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PresenceOptional with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PresenceOptionalMultiError, or nil if none found.
func (m *PresenceOptional) ValidateAll() error {
	return m.validate(true)
}

func (m *PresenceOptional) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPresence() != 0 {
		err := PresenceOptionalValidationError{
			field:  "Presence",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PresenceOptionalMultiError(errors)
	}
	return nil
}

// PresenceOptionalMultiError is an error wrapping multiple validation errors
// returned by PresenceOptional.ValidateAll() if the designated constraints
// aren't met.
type PresenceOptionalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PresenceOptionalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PresenceOptionalMultiError) AllErrors() []error { return m }

// PresenceOptionalValidationError is the validation error returned by
// PresenceOptional.Validate if the designated constraints aren't met.
type PresenceOptionalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PresenceOptionalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PresenceOptionalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PresenceOptionalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PresenceOptionalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PresenceOptionalValidationError) ErrorName() string { return "PresenceOptionalValidationError" }

// Error satisfies the builtin error interface
func (e PresenceOptionalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPresenceOptional.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PresenceOptionalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PresenceOptionalValidationError{}

// Validate checks the field values on PresenceConditional with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PresenceConditional) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PresenceConditional with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PresenceConditionalMultiError, or nil if none found.
func (m *PresenceConditional) ValidateAll() error {
	return m.validate(true)
}

func (m *PresenceConditional) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPresence() != 1 {
		err := PresenceConditionalValidationError{
			field:  "Presence",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PresenceConditionalMultiError(errors)
	}
	return nil
}

// PresenceConditionalMultiError is an error wrapping multiple validation
// errors returned by PresenceConditional.ValidateAll() if the designated
// constraints aren't met.
type PresenceConditionalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PresenceConditionalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PresenceConditionalMultiError) AllErrors() []error { return m }

// PresenceConditionalValidationError is the validation error returned by
// PresenceConditional.Validate if the designated constraints aren't met.
type PresenceConditionalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PresenceConditionalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PresenceConditionalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PresenceConditionalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PresenceConditionalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PresenceConditionalValidationError) ErrorName() string {
	return "PresenceConditionalValidationError"
}

// Error satisfies the builtin error interface
func (e PresenceConditionalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPresenceConditional.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PresenceConditionalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PresenceConditionalValidationError{}

// Validate checks the field values on PresenceMandatory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PresenceMandatory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PresenceMandatory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PresenceMandatoryMultiError, or nil if none found.
func (m *PresenceMandatory) ValidateAll() error {
	return m.validate(true)
}

func (m *PresenceMandatory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPresence() != 2 {
		err := PresenceMandatoryValidationError{
			field:  "Presence",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PresenceMandatoryMultiError(errors)
	}
	return nil
}

// PresenceMandatoryMultiError is an error wrapping multiple validation errors
// returned by PresenceMandatory.ValidateAll() if the designated constraints
// aren't met.
type PresenceMandatoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PresenceMandatoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PresenceMandatoryMultiError) AllErrors() []error { return m }

// PresenceMandatoryValidationError is the validation error returned by
// PresenceMandatory.Validate if the designated constraints aren't met.
type PresenceMandatoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PresenceMandatoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PresenceMandatoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PresenceMandatoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PresenceMandatoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PresenceMandatoryValidationError) ErrorName() string {
	return "PresenceMandatoryValidationError"
}

// Error satisfies the builtin error interface
func (e PresenceMandatoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPresenceMandatory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PresenceMandatoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PresenceMandatoryValidationError{}

// Validate checks the field values on ProcedureCode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProcedureCode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcedureCode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProcedureCodeMultiError, or
// nil if none found.
func (m *ProcedureCode) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcedureCode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 255 {
		err := ProcedureCodeValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProcedureCodeMultiError(errors)
	}
	return nil
}

// ProcedureCodeMultiError is an error wrapping multiple validation errors
// returned by ProcedureCode.ValidateAll() if the designated constraints
// aren't met.
type ProcedureCodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcedureCodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcedureCodeMultiError) AllErrors() []error { return m }

// ProcedureCodeValidationError is the validation error returned by
// ProcedureCode.Validate if the designated constraints aren't met.
type ProcedureCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcedureCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcedureCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcedureCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcedureCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcedureCodeValidationError) ErrorName() string { return "ProcedureCodeValidationError" }

// Error satisfies the builtin error interface
func (e ProcedureCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcedureCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcedureCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcedureCodeValidationError{}

// Validate checks the field values on ProtocolIeId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProtocolIeId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProtocolIeId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProtocolIeIdMultiError, or
// nil if none found.
func (m *ProtocolIeId) ValidateAll() error {
	return m.validate(true)
}

func (m *ProtocolIeId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 65535 {
		err := ProtocolIeIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProtocolIeIdMultiError(errors)
	}
	return nil
}

// ProtocolIeIdMultiError is an error wrapping multiple validation errors
// returned by ProtocolIeId.ValidateAll() if the designated constraints aren't met.
type ProtocolIeIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProtocolIeIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProtocolIeIdMultiError) AllErrors() []error { return m }

// ProtocolIeIdValidationError is the validation error returned by
// ProtocolIeId.Validate if the designated constraints aren't met.
type ProtocolIeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtocolIeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtocolIeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtocolIeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtocolIeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtocolIeIdValidationError) ErrorName() string { return "ProtocolIeIdValidationError" }

// Error satisfies the builtin error interface
func (e ProtocolIeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtocolIeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtocolIeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtocolIeIdValidationError{}

// Validate checks the field values on RiccallProcessId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RiccallProcessId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RiccallProcessId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RiccallProcessIdMultiError, or nil if none found.
func (m *RiccallProcessId) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccallProcessId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RiccallProcessIdMultiError(errors)
	}
	return nil
}

// RiccallProcessIdMultiError is an error wrapping multiple validation errors
// returned by RiccallProcessId.ValidateAll() if the designated constraints
// aren't met.
type RiccallProcessIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccallProcessIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccallProcessIdMultiError) AllErrors() []error { return m }

// RiccallProcessIdValidationError is the validation error returned by
// RiccallProcessId.Validate if the designated constraints aren't met.
type RiccallProcessIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccallProcessIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccallProcessIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccallProcessIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccallProcessIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccallProcessIdValidationError) ErrorName() string { return "RiccallProcessIdValidationError" }

// Error satisfies the builtin error interface
func (e RiccallProcessIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccallProcessId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccallProcessIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccallProcessIdValidationError{}

// Validate checks the field values on RiccontrolHeader with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RiccontrolHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RiccontrolHeaderMultiError, or nil if none found.
func (m *RiccontrolHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RiccontrolHeaderMultiError(errors)
	}
	return nil
}

// RiccontrolHeaderMultiError is an error wrapping multiple validation errors
// returned by RiccontrolHeader.ValidateAll() if the designated constraints
// aren't met.
type RiccontrolHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolHeaderMultiError) AllErrors() []error { return m }

// RiccontrolHeaderValidationError is the validation error returned by
// RiccontrolHeader.Validate if the designated constraints aren't met.
type RiccontrolHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolHeaderValidationError) ErrorName() string { return "RiccontrolHeaderValidationError" }

// Error satisfies the builtin error interface
func (e RiccontrolHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolHeaderValidationError{}

// Validate checks the field values on RiccontrolMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RiccontrolMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RiccontrolMessageMultiError, or nil if none found.
func (m *RiccontrolMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RiccontrolMessageMultiError(errors)
	}
	return nil
}

// RiccontrolMessageMultiError is an error wrapping multiple validation errors
// returned by RiccontrolMessage.ValidateAll() if the designated constraints
// aren't met.
type RiccontrolMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolMessageMultiError) AllErrors() []error { return m }

// RiccontrolMessageValidationError is the validation error returned by
// RiccontrolMessage.Validate if the designated constraints aren't met.
type RiccontrolMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolMessageValidationError) ErrorName() string {
	return "RiccontrolMessageValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolMessageValidationError{}

// Validate checks the field values on RiccontrolOutcome with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RiccontrolOutcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RiccontrolOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RiccontrolOutcomeMultiError, or nil if none found.
func (m *RiccontrolOutcome) ValidateAll() error {
	return m.validate(true)
}

func (m *RiccontrolOutcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RiccontrolOutcomeMultiError(errors)
	}
	return nil
}

// RiccontrolOutcomeMultiError is an error wrapping multiple validation errors
// returned by RiccontrolOutcome.ValidateAll() if the designated constraints
// aren't met.
type RiccontrolOutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiccontrolOutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiccontrolOutcomeMultiError) AllErrors() []error { return m }

// RiccontrolOutcomeValidationError is the validation error returned by
// RiccontrolOutcome.Validate if the designated constraints aren't met.
type RiccontrolOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolOutcomeValidationError) ErrorName() string {
	return "RiccontrolOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolOutcomeValidationError{}

// Validate checks the field values on RicindicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicindicationHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicindicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicindicationHeaderMultiError, or nil if none found.
func (m *RicindicationHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *RicindicationHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicindicationHeaderMultiError(errors)
	}
	return nil
}

// RicindicationHeaderMultiError is an error wrapping multiple validation
// errors returned by RicindicationHeader.ValidateAll() if the designated
// constraints aren't met.
type RicindicationHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicindicationHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicindicationHeaderMultiError) AllErrors() []error { return m }

// RicindicationHeaderValidationError is the validation error returned by
// RicindicationHeader.Validate if the designated constraints aren't met.
type RicindicationHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationHeaderValidationError) ErrorName() string {
	return "RicindicationHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationHeaderValidationError{}

// Validate checks the field values on RicindicationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicindicationMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicindicationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicindicationMessageMultiError, or nil if none found.
func (m *RicindicationMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *RicindicationMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicindicationMessageMultiError(errors)
	}
	return nil
}

// RicindicationMessageMultiError is an error wrapping multiple validation
// errors returned by RicindicationMessage.ValidateAll() if the designated
// constraints aren't met.
type RicindicationMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicindicationMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicindicationMessageMultiError) AllErrors() []error { return m }

// RicindicationMessageValidationError is the validation error returned by
// RicindicationMessage.Validate if the designated constraints aren't met.
type RicindicationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationMessageValidationError) ErrorName() string {
	return "RicindicationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationMessageValidationError{}

// Validate checks the field values on RanfunctionDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionDefinitionMultiError, or nil if none found.
func (m *RanfunctionDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RanfunctionDefinitionMultiError(errors)
	}
	return nil
}

// RanfunctionDefinitionMultiError is an error wrapping multiple validation
// errors returned by RanfunctionDefinition.ValidateAll() if the designated
// constraints aren't met.
type RanfunctionDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionValidationError is the validation error returned by
// RanfunctionDefinition.Validate if the designated constraints aren't met.
type RanfunctionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionValidationError) ErrorName() string {
	return "RanfunctionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionValidationError{}

// Validate checks the field values on RanfunctionOid with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RanfunctionOid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionOid with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RanfunctionOidMultiError,
// or nil if none found.
func (m *RanfunctionOid) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionOid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RanfunctionOidMultiError(errors)
	}
	return nil
}

// RanfunctionOidMultiError is an error wrapping multiple validation errors
// returned by RanfunctionOid.ValidateAll() if the designated constraints
// aren't met.
type RanfunctionOidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionOidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionOidMultiError) AllErrors() []error { return m }

// RanfunctionOidValidationError is the validation error returned by
// RanfunctionOid.Validate if the designated constraints aren't met.
type RanfunctionOidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionOidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionOidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionOidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionOidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionOidValidationError) ErrorName() string { return "RanfunctionOidValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionOidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionOid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionOidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionOidValidationError{}

// Validate checks the field values on PlmnIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlmnIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlmnIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlmnIdentityMultiError, or
// nil if none found.
func (m *PlmnIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *PlmnIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 3 {
		err := PlmnIdentityValidationError{
			field:  "Value",
			reason: "value length must be 3 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PlmnIdentityMultiError(errors)
	}
	return nil
}

// PlmnIdentityMultiError is an error wrapping multiple validation errors
// returned by PlmnIdentity.ValidateAll() if the designated constraints aren't met.
type PlmnIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlmnIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlmnIdentityMultiError) AllErrors() []error { return m }

// PlmnIdentityValidationError is the validation error returned by
// PlmnIdentity.Validate if the designated constraints aren't met.
type PlmnIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnIdentityValidationError) ErrorName() string { return "PlmnIdentityValidationError" }

// Error satisfies the builtin error interface
func (e PlmnIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnIdentityValidationError{}

// Validate checks the field values on RiceventTriggerDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RiceventTriggerDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RiceventTriggerDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RiceventTriggerDefinitionMultiError, or nil if none found.
func (m *RiceventTriggerDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *RiceventTriggerDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RiceventTriggerDefinitionMultiError(errors)
	}
	return nil
}

// RiceventTriggerDefinitionMultiError is an error wrapping multiple validation
// errors returned by RiceventTriggerDefinition.ValidateAll() if the
// designated constraints aren't met.
type RiceventTriggerDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RiceventTriggerDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RiceventTriggerDefinitionMultiError) AllErrors() []error { return m }

// RiceventTriggerDefinitionValidationError is the validation error returned by
// RiceventTriggerDefinition.Validate if the designated constraints aren't met.
type RiceventTriggerDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiceventTriggerDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiceventTriggerDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiceventTriggerDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiceventTriggerDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiceventTriggerDefinitionValidationError) ErrorName() string {
	return "RiceventTriggerDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e RiceventTriggerDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiceventTriggerDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiceventTriggerDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiceventTriggerDefinitionValidationError{}

// Validate checks the field values on RicactionDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicactionDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicactionDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicactionDefinitionMultiError, or nil if none found.
func (m *RicactionDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *RicactionDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicactionDefinitionMultiError(errors)
	}
	return nil
}

// RicactionDefinitionMultiError is an error wrapping multiple validation
// errors returned by RicactionDefinition.ValidateAll() if the designated
// constraints aren't met.
type RicactionDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicactionDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicactionDefinitionMultiError) AllErrors() []error { return m }

// RicactionDefinitionValidationError is the validation error returned by
// RicactionDefinition.Validate if the designated constraints aren't met.
type RicactionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionDefinitionValidationError) ErrorName() string {
	return "RicactionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionDefinitionValidationError{}

// Validate checks the field values on BitString with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BitString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BitString with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BitStringMultiError, or nil
// if none found.
func (m *BitString) ValidateAll() error {
	return m.validate(true)
}

func (m *BitString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Len

	if len(errors) > 0 {
		return BitStringMultiError(errors)
	}
	return nil
}

// BitStringMultiError is an error wrapping multiple validation errors returned
// by BitString.ValidateAll() if the designated constraints aren't met.
type BitStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BitStringMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BitStringMultiError) AllErrors() []error { return m }

// BitStringValidationError is the validation error returned by
// BitString.Validate if the designated constraints aren't met.
type BitStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BitStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BitStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BitStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BitStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BitStringValidationError) ErrorName() string { return "BitStringValidationError" }

// Error satisfies the builtin error interface
func (e BitStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBitString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BitStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BitStringValidationError{}
