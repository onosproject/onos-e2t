// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/e2ap/v2/e2ap_pdu_descriptions.proto

package e2ap_pdu_descriptions

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on E2ApPdu with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *E2ApPdu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2ApPdu with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in E2ApPduMultiError, or nil if none found.
func (m *E2ApPdu) ValidateAll() error {
	return m.validate(true)
}

func (m *E2ApPdu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2ApPdu.(type) {

	case *E2ApPdu_InitiatingMessage:

		if all {
			switch v := interface{}(m.GetInitiatingMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2ApPduValidationError{
						field:  "InitiatingMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2ApPduValidationError{
						field:  "InitiatingMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2ApPduValidationError{
					field:  "InitiatingMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2ApPdu_SuccessfulOutcome:

		if all {
			switch v := interface{}(m.GetSuccessfulOutcome()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2ApPduValidationError{
						field:  "SuccessfulOutcome",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2ApPduValidationError{
						field:  "SuccessfulOutcome",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSuccessfulOutcome()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2ApPduValidationError{
					field:  "SuccessfulOutcome",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2ApPdu_UnsuccessfulOutcome:

		if all {
			switch v := interface{}(m.GetUnsuccessfulOutcome()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2ApPduValidationError{
						field:  "UnsuccessfulOutcome",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2ApPduValidationError{
						field:  "UnsuccessfulOutcome",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnsuccessfulOutcome()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2ApPduValidationError{
					field:  "UnsuccessfulOutcome",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2ApPduMultiError(errors)
	}

	return nil
}

// E2ApPduMultiError is an error wrapping multiple validation errors returned
// by E2ApPdu.ValidateAll() if the designated constraints aren't met.
type E2ApPduMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2ApPduMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2ApPduMultiError) AllErrors() []error { return m }

// E2ApPduValidationError is the validation error returned by E2ApPdu.Validate
// if the designated constraints aren't met.
type E2ApPduValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2ApPduValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2ApPduValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2ApPduValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2ApPduValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2ApPduValidationError) ErrorName() string { return "E2ApPduValidationError" }

// Error satisfies the builtin error interface
func (e E2ApPduValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2ApPdu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2ApPduValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2ApPduValidationError{}

// Validate checks the field values on InitiatingMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InitiatingMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiatingMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiatingMessageMultiError, or nil if none found.
func (m *InitiatingMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiatingMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProcedureCode

	// no validation rules for Criticality

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiatingMessageValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiatingMessageValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiatingMessageValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitiatingMessageMultiError(errors)
	}

	return nil
}

// InitiatingMessageMultiError is an error wrapping multiple validation errors
// returned by InitiatingMessage.ValidateAll() if the designated constraints
// aren't met.
type InitiatingMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiatingMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiatingMessageMultiError) AllErrors() []error { return m }

// InitiatingMessageValidationError is the validation error returned by
// InitiatingMessage.Validate if the designated constraints aren't met.
type InitiatingMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiatingMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiatingMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiatingMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiatingMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiatingMessageValidationError) ErrorName() string {
	return "InitiatingMessageValidationError"
}

// Error satisfies the builtin error interface
func (e InitiatingMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiatingMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiatingMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiatingMessageValidationError{}

// Validate checks the field values on
// InitiatingMessageE2ApElementaryProcedures with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InitiatingMessageE2ApElementaryProcedures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// InitiatingMessageE2ApElementaryProcedures with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// InitiatingMessageE2ApElementaryProceduresMultiError, or nil if none found.
func (m *InitiatingMessageE2ApElementaryProcedures) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiatingMessageE2ApElementaryProcedures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.ImValues.(type) {

	case *InitiatingMessageE2ApElementaryProcedures_RicSubscription:

		if all {
			switch v := interface{}(m.GetRicSubscription()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicSubscription",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicSubscription",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicSubscription()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageE2ApElementaryProceduresValidationError{
					field:  "RicSubscription",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageE2ApElementaryProcedures_RicSubscriptionDelete:

		if all {
			switch v := interface{}(m.GetRicSubscriptionDelete()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicSubscriptionDelete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicSubscriptionDelete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicSubscriptionDelete()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageE2ApElementaryProceduresValidationError{
					field:  "RicSubscriptionDelete",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageE2ApElementaryProcedures_RicServiceUpdate:

		if all {
			switch v := interface{}(m.GetRicServiceUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicServiceUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicServiceUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicServiceUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageE2ApElementaryProceduresValidationError{
					field:  "RicServiceUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageE2ApElementaryProcedures_RicControl:

		if all {
			switch v := interface{}(m.GetRicControl()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicControl",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicControl",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicControl()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageE2ApElementaryProceduresValidationError{
					field:  "RicControl",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageE2ApElementaryProcedures_E2Setup:

		if all {
			switch v := interface{}(m.GetE2Setup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "E2Setup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "E2Setup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2Setup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageE2ApElementaryProceduresValidationError{
					field:  "E2Setup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageE2ApElementaryProcedures_E2NodeConfigurationUpdate:

		if all {
			switch v := interface{}(m.GetE2NodeConfigurationUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "E2NodeConfigurationUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "E2NodeConfigurationUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2NodeConfigurationUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageE2ApElementaryProceduresValidationError{
					field:  "E2NodeConfigurationUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageE2ApElementaryProcedures_E2ConnectionUpdate:

		if all {
			switch v := interface{}(m.GetE2ConnectionUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "E2ConnectionUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "E2ConnectionUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2ConnectionUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageE2ApElementaryProceduresValidationError{
					field:  "E2ConnectionUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageE2ApElementaryProcedures_Reset_:

		if all {
			switch v := interface{}(m.GetReset_()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "Reset_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "Reset_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReset_()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageE2ApElementaryProceduresValidationError{
					field:  "Reset_",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageE2ApElementaryProcedures_RicIndication:

		if all {
			switch v := interface{}(m.GetRicIndication()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicIndication",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicIndication",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicIndication()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageE2ApElementaryProceduresValidationError{
					field:  "RicIndication",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageE2ApElementaryProcedures_RicServiceQuery:

		if all {
			switch v := interface{}(m.GetRicServiceQuery()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicServiceQuery",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicServiceQuery",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicServiceQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageE2ApElementaryProceduresValidationError{
					field:  "RicServiceQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageE2ApElementaryProcedures_ErrorIndication:

		if all {
			switch v := interface{}(m.GetErrorIndication()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "ErrorIndication",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "ErrorIndication",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetErrorIndication()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageE2ApElementaryProceduresValidationError{
					field:  "ErrorIndication",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageE2ApElementaryProcedures_RicSubscriptionDeleteRequired:

		if all {
			switch v := interface{}(m.GetRicSubscriptionDeleteRequired()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicSubscriptionDeleteRequired",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageE2ApElementaryProceduresValidationError{
						field:  "RicSubscriptionDeleteRequired",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicSubscriptionDeleteRequired()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageE2ApElementaryProceduresValidationError{
					field:  "RicSubscriptionDeleteRequired",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InitiatingMessageE2ApElementaryProceduresMultiError(errors)
	}

	return nil
}

// InitiatingMessageE2ApElementaryProceduresMultiError is an error wrapping
// multiple validation errors returned by
// InitiatingMessageE2ApElementaryProcedures.ValidateAll() if the designated
// constraints aren't met.
type InitiatingMessageE2ApElementaryProceduresMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiatingMessageE2ApElementaryProceduresMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiatingMessageE2ApElementaryProceduresMultiError) AllErrors() []error { return m }

// InitiatingMessageE2ApElementaryProceduresValidationError is the validation
// error returned by InitiatingMessageE2ApElementaryProcedures.Validate if the
// designated constraints aren't met.
type InitiatingMessageE2ApElementaryProceduresValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiatingMessageE2ApElementaryProceduresValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiatingMessageE2ApElementaryProceduresValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiatingMessageE2ApElementaryProceduresValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiatingMessageE2ApElementaryProceduresValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiatingMessageE2ApElementaryProceduresValidationError) ErrorName() string {
	return "InitiatingMessageE2ApElementaryProceduresValidationError"
}

// Error satisfies the builtin error interface
func (e InitiatingMessageE2ApElementaryProceduresValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiatingMessageE2ApElementaryProcedures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiatingMessageE2ApElementaryProceduresValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiatingMessageE2ApElementaryProceduresValidationError{}

// Validate checks the field values on SuccessfulOutcome with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SuccessfulOutcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuccessfulOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuccessfulOutcomeMultiError, or nil if none found.
func (m *SuccessfulOutcome) ValidateAll() error {
	return m.validate(true)
}

func (m *SuccessfulOutcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProcedureCode

	// no validation rules for Criticality

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuccessfulOutcomeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuccessfulOutcomeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuccessfulOutcomeValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuccessfulOutcomeMultiError(errors)
	}

	return nil
}

// SuccessfulOutcomeMultiError is an error wrapping multiple validation errors
// returned by SuccessfulOutcome.ValidateAll() if the designated constraints
// aren't met.
type SuccessfulOutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuccessfulOutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuccessfulOutcomeMultiError) AllErrors() []error { return m }

// SuccessfulOutcomeValidationError is the validation error returned by
// SuccessfulOutcome.Validate if the designated constraints aren't met.
type SuccessfulOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuccessfulOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuccessfulOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuccessfulOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuccessfulOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuccessfulOutcomeValidationError) ErrorName() string {
	return "SuccessfulOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e SuccessfulOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuccessfulOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuccessfulOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuccessfulOutcomeValidationError{}

// Validate checks the field values on
// SuccessfulOutcomeE2ApElementaryProcedures with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SuccessfulOutcomeE2ApElementaryProcedures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SuccessfulOutcomeE2ApElementaryProcedures with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SuccessfulOutcomeE2ApElementaryProceduresMultiError, or nil if none found.
func (m *SuccessfulOutcomeE2ApElementaryProcedures) ValidateAll() error {
	return m.validate(true)
}

func (m *SuccessfulOutcomeE2ApElementaryProcedures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.SoValues.(type) {

	case *SuccessfulOutcomeE2ApElementaryProcedures_RicSubscription:

		if all {
			switch v := interface{}(m.GetRicSubscription()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicSubscription",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicSubscription",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicSubscription()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "RicSubscription",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SuccessfulOutcomeE2ApElementaryProcedures_RicSubscriptionDelete:

		if all {
			switch v := interface{}(m.GetRicSubscriptionDelete()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicSubscriptionDelete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicSubscriptionDelete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicSubscriptionDelete()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "RicSubscriptionDelete",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SuccessfulOutcomeE2ApElementaryProcedures_RicServiceUpdate:

		if all {
			switch v := interface{}(m.GetRicServiceUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicServiceUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicServiceUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicServiceUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "RicServiceUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SuccessfulOutcomeE2ApElementaryProcedures_RicControl:

		if all {
			switch v := interface{}(m.GetRicControl()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicControl",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicControl",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicControl()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "RicControl",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SuccessfulOutcomeE2ApElementaryProcedures_E2Setup:

		if all {
			switch v := interface{}(m.GetE2Setup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "E2Setup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "E2Setup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2Setup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "E2Setup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SuccessfulOutcomeE2ApElementaryProcedures_E2NodeConfigurationUpdate:

		if all {
			switch v := interface{}(m.GetE2NodeConfigurationUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "E2NodeConfigurationUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "E2NodeConfigurationUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2NodeConfigurationUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "E2NodeConfigurationUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SuccessfulOutcomeE2ApElementaryProcedures_E2ConnectionUpdate:

		if all {
			switch v := interface{}(m.GetE2ConnectionUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "E2ConnectionUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "E2ConnectionUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2ConnectionUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "E2ConnectionUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SuccessfulOutcomeE2ApElementaryProcedures_Reset_:

		if all {
			switch v := interface{}(m.GetReset_()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "Reset_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "Reset_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReset_()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "Reset_",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SuccessfulOutcomeE2ApElementaryProceduresMultiError(errors)
	}

	return nil
}

// SuccessfulOutcomeE2ApElementaryProceduresMultiError is an error wrapping
// multiple validation errors returned by
// SuccessfulOutcomeE2ApElementaryProcedures.ValidateAll() if the designated
// constraints aren't met.
type SuccessfulOutcomeE2ApElementaryProceduresMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuccessfulOutcomeE2ApElementaryProceduresMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuccessfulOutcomeE2ApElementaryProceduresMultiError) AllErrors() []error { return m }

// SuccessfulOutcomeE2ApElementaryProceduresValidationError is the validation
// error returned by SuccessfulOutcomeE2ApElementaryProcedures.Validate if the
// designated constraints aren't met.
type SuccessfulOutcomeE2ApElementaryProceduresValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuccessfulOutcomeE2ApElementaryProceduresValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuccessfulOutcomeE2ApElementaryProceduresValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuccessfulOutcomeE2ApElementaryProceduresValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuccessfulOutcomeE2ApElementaryProceduresValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuccessfulOutcomeE2ApElementaryProceduresValidationError) ErrorName() string {
	return "SuccessfulOutcomeE2ApElementaryProceduresValidationError"
}

// Error satisfies the builtin error interface
func (e SuccessfulOutcomeE2ApElementaryProceduresValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuccessfulOutcomeE2ApElementaryProcedures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuccessfulOutcomeE2ApElementaryProceduresValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuccessfulOutcomeE2ApElementaryProceduresValidationError{}

// Validate checks the field values on UnsuccessfulOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsuccessfulOutcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsuccessfulOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsuccessfulOutcomeMultiError, or nil if none found.
func (m *UnsuccessfulOutcome) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsuccessfulOutcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProcedureCode

	// no validation rules for Criticality

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsuccessfulOutcomeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsuccessfulOutcomeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsuccessfulOutcomeValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnsuccessfulOutcomeMultiError(errors)
	}

	return nil
}

// UnsuccessfulOutcomeMultiError is an error wrapping multiple validation
// errors returned by UnsuccessfulOutcome.ValidateAll() if the designated
// constraints aren't met.
type UnsuccessfulOutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsuccessfulOutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsuccessfulOutcomeMultiError) AllErrors() []error { return m }

// UnsuccessfulOutcomeValidationError is the validation error returned by
// UnsuccessfulOutcome.Validate if the designated constraints aren't met.
type UnsuccessfulOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsuccessfulOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsuccessfulOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsuccessfulOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsuccessfulOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsuccessfulOutcomeValidationError) ErrorName() string {
	return "UnsuccessfulOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e UnsuccessfulOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsuccessfulOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsuccessfulOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsuccessfulOutcomeValidationError{}

// Validate checks the field values on
// UnsuccessfulOutcomeE2ApElementaryProcedures with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnsuccessfulOutcomeE2ApElementaryProcedures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnsuccessfulOutcomeE2ApElementaryProcedures with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UnsuccessfulOutcomeE2ApElementaryProceduresMultiError, or nil if none found.
func (m *UnsuccessfulOutcomeE2ApElementaryProcedures) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsuccessfulOutcomeE2ApElementaryProcedures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.UoValues.(type) {

	case *UnsuccessfulOutcomeE2ApElementaryProcedures_RicSubscription:

		if all {
			switch v := interface{}(m.GetRicSubscription()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicSubscription",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicSubscription",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicSubscription()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "RicSubscription",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UnsuccessfulOutcomeE2ApElementaryProcedures_RicSubscriptionDelete:

		if all {
			switch v := interface{}(m.GetRicSubscriptionDelete()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicSubscriptionDelete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicSubscriptionDelete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicSubscriptionDelete()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "RicSubscriptionDelete",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UnsuccessfulOutcomeE2ApElementaryProcedures_RicServiceUpdate:

		if all {
			switch v := interface{}(m.GetRicServiceUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicServiceUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicServiceUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicServiceUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "RicServiceUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UnsuccessfulOutcomeE2ApElementaryProcedures_RicControl:

		if all {
			switch v := interface{}(m.GetRicControl()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicControl",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "RicControl",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicControl()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "RicControl",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UnsuccessfulOutcomeE2ApElementaryProcedures_E2Setup:

		if all {
			switch v := interface{}(m.GetE2Setup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "E2Setup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "E2Setup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2Setup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "E2Setup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UnsuccessfulOutcomeE2ApElementaryProcedures_E2NodeConfigurationUpdate:

		if all {
			switch v := interface{}(m.GetE2NodeConfigurationUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "E2NodeConfigurationUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "E2NodeConfigurationUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2NodeConfigurationUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "E2NodeConfigurationUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UnsuccessfulOutcomeE2ApElementaryProcedures_E2ConnectionUpdate:

		if all {
			switch v := interface{}(m.GetE2ConnectionUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "E2ConnectionUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
						field:  "E2ConnectionUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2ConnectionUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{
					field:  "E2ConnectionUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnsuccessfulOutcomeE2ApElementaryProceduresMultiError(errors)
	}

	return nil
}

// UnsuccessfulOutcomeE2ApElementaryProceduresMultiError is an error wrapping
// multiple validation errors returned by
// UnsuccessfulOutcomeE2ApElementaryProcedures.ValidateAll() if the designated
// constraints aren't met.
type UnsuccessfulOutcomeE2ApElementaryProceduresMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsuccessfulOutcomeE2ApElementaryProceduresMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsuccessfulOutcomeE2ApElementaryProceduresMultiError) AllErrors() []error { return m }

// UnsuccessfulOutcomeE2ApElementaryProceduresValidationError is the validation
// error returned by UnsuccessfulOutcomeE2ApElementaryProcedures.Validate if
// the designated constraints aren't met.
type UnsuccessfulOutcomeE2ApElementaryProceduresValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsuccessfulOutcomeE2ApElementaryProceduresValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsuccessfulOutcomeE2ApElementaryProceduresValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsuccessfulOutcomeE2ApElementaryProceduresValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsuccessfulOutcomeE2ApElementaryProceduresValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsuccessfulOutcomeE2ApElementaryProceduresValidationError) ErrorName() string {
	return "UnsuccessfulOutcomeE2ApElementaryProceduresValidationError"
}

// Error satisfies the builtin error interface
func (e UnsuccessfulOutcomeE2ApElementaryProceduresValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsuccessfulOutcomeE2ApElementaryProcedures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsuccessfulOutcomeE2ApElementaryProceduresValidationError{}
